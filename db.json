{"Asset":[{"_id":"themes/nut/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":false},{"_id":"themes/nut/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":false},{"_id":"themes/nut/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/nut/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":false},{"_id":"themes/nut/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":false},{"_id":"themes/nut/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/nut/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/nut/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/nut/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/nut/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/nut/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/nut/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/nut/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/nut/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/nut/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/nut/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/nut/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/nut/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/nut/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/nut/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/nut/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/nut/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/nut/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/nut/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/nut/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/nut/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1407586169000},{"_id":"scaffolds/page.md","mtime":1407586169000},{"_id":"scaffolds/photo.md","mtime":1407586169000},{"_id":"scaffolds/post.md","mtime":1407591163000},{"_id":"source/_posts/2014-books.md","mtime":1419859942000},{"_id":"source/_posts/algorithm-complexity.md","mtime":1419950190000},{"_id":"source/_posts/data-structure-tree-basic.md","mtime":1413888268000},{"_id":"source/_posts/git-beginner.md","mtime":1407741065000},{"_id":"source/_posts/jdk-arraylist.md","mtime":1407673860000},{"_id":"source/_posts/jdk-hashmap.md","mtime":1407675224000},{"_id":"source/_posts/jvm-debug.md","mtime":1407675803000},{"_id":"source/_posts/linux-basic-command.md","mtime":1419844984000},{"_id":"source/_posts/solr-1.md","mtime":1440037512000},{"_id":"source/_posts/solr-2.md","mtime":1420804158000},{"_id":"source/_posts/solr-3.md","mtime":1421314940000},{"_id":"source/_posts/synchronized.md","mtime":1407676355000},{"_id":"source/_posts/zhenyan.md","mtime":1419844965000},{"_id":"source/about/index.md","mtime":1407588436000},{"_id":"themes/nut/LICENSE","mtime":1407673193000},{"_id":"themes/nut/Gruntfile.js","mtime":1407673193000},{"_id":"themes/nut/_config.yml","mtime":1407673193000},{"_id":"themes/nut/README.md","mtime":1407673193000},{"_id":"themes/nut/package.json","mtime":1407673193000},{"_id":"themes/nut/scripts/extend.generator.js","mtime":1407673193000},{"_id":"themes/nut/scripts/extend.helper.js","mtime":1407673193000},{"_id":"themes/nut/scripts/extend.renderer.js","mtime":1407673193000},{"_id":"themes/nut/scripts/extend.tag.js","mtime":1407673193000},{"_id":"themes/nut/scripts/fancybox.js","mtime":1407673193000},{"_id":"themes/nut/layout/archive.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/category.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/index.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/layout.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/page.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/post.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/tag.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/wiki.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_widget/archive.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_widget/blogroll.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_widget/category.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_widget/nav.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_widget/post_category.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_widget/post_date.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_widget/post_tag.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_widget/recent_posts.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_widget/search.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_widget/tag.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_widget/tagcloud.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/after-footer.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/archive-post.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/archive.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/article.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/category.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/footer.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/google-analytics.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/head.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/header.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/mobile-nav.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/sidebar.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/tag.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/wiki-toc.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/wiki.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/post/category.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/post/date.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/post/gallery.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/post/nav.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/post/tag.ejs","mtime":1407673193000},{"_id":"themes/nut/layout/_partial/post/title.ejs","mtime":1407673193000},{"_id":"themes/nut/source/js/bootstrap.min.js","mtime":1407673193000},{"_id":"themes/nut/source/js/jquery.fitvids.js","mtime":1407673193000},{"_id":"themes/nut/source/js/script.js","mtime":1407673193000},{"_id":"themes/nut/source/css/_extend.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_variables.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/bootstrap.min.css","mtime":1407673193000},{"_id":"themes/nut/source/css/font-awesome.min.css","mtime":1407673193000},{"_id":"themes/nut/source/css/style.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_partial/archive.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_partial/article.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_partial/cat-tag.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_partial/comment.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_partial/footer.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_partial/header.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_partial/mobile.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_partial/sidebar-aside.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_partial/highlight.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_partial/sidebar-bottom.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_partial/sidebar.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_partial/wiki.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_util/grid.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/_util/mixin.styl","mtime":1407673193000},{"_id":"themes/nut/source/css/fonts/FontAwesome.otf","mtime":1407673193000},{"_id":"themes/nut/source/css/fonts/fontawesome-webfont.svg","mtime":1407673193000},{"_id":"themes/nut/source/css/fonts/fontawesome-webfont.eot","mtime":1407673193000},{"_id":"themes/nut/source/css/fonts/fontawesome-webfont.woff","mtime":1407673193000},{"_id":"themes/nut/source/css/fonts/fontawesome-webfont.ttf","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/blank.gif","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/fancybox_loading.gif","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/fancybox_loading@2x.gif","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/fancybox_overlay.png","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/fancybox_sprite.png","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/fancybox_sprite@2x.png","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/jquery.fancybox.css","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/jquery.fancybox.js","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/jquery.fancybox.pack.js","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/helpers/fancybox_buttons.png","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1407673193000},{"_id":"themes/nut/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1407673193000},{"_id":"source/_posts/zookeeper-quick-build.md","mtime":1421242503000},{"_id":"source/_posts/react-tutorial-1.md","mtime":1440339414000},{"_id":"source/_posts/react-tutorial-2.md","mtime":1440339445000}],"Category":[{"name":"数据结构","_id":"5l9ah3iavsqi1pq7","posts":["e19ryc5vcxs5dydl"]},{"name":"git","_id":"d3eu0vybkmx0gi6g","posts":["25tk03ghjlxwzceb"]},{"name":"JDK源码","_id":"fe8bobv6wgutfz8v","posts":["r1gjyknpiegdjgt2","zsmvbgzt8z9o4z5w"]},{"name":"debug","_id":"s5ffapec432gusyh","posts":["h7ohxiv5pjktdejm"]},{"name":"linux","_id":"l7abwq67s4vkrzh6","posts":["slkuh1t29q7n9xo7"]},{"name":"solr","_id":"w1k4bjsef96nr87p","posts":["gf1g4gk3a378da76","18lyq3jg4cc3tped","vpru0nqmdfd5eai1"]},{"name":"java","_id":"1inpy0bhxyr0i04e","posts":["nurv2ibt8di27mw9"]},{"name":"other","_id":"dziqw8cnb043eh7n","posts":["uhth8ts4j3iu5z6s"]},{"name":"book","_id":"nc7fe6j0xx7mwecf","posts":["p2i1iov5dxmxuwfd"]},{"name":"算法","_id":"t1h5vbwb4116inkp","posts":["ry81oclhf8k9w84z"]},{"name":"集群","_id":"la1sa0mvu1s8u9sa","posts":["t9hzerh5cee9fg6b"]},{"name":"react","_id":"jd1ja1ba68lgaj4j","posts":["m53q4x1mgfmdn3r6","3wgatwo1q5fnjb9w"]}],"Page":[{"title":"about","date":1407587648000,"content":"<h4 id=\"超人不会飞\">超人不会飞</h4><h5 id=\"coder.jiangshan@gmail.com\">coder.jiangshan@gmail.com</h5>","source":"about/index.md","raw":"title: about\ndate: 2014-08-09 20:34:08\n---\n####超人不会飞  \n#####coder.jiangshan@gmail.com  ","updated":1407588436000,"path":"about/index.html","excerpt":"","_id":"mj3c8gvz02ix7jc7","comments":true,"layout":"page"}],"Post":[{"title":"数据结构-树(基础)","date":1413886935000,"categories":["5l9ah3iavsqi1pq7"],"tags":["utoz8vmhwx4vkcbb","1po2xzmnh3tc4bpp","02q9sfee9qgapn7s"],"description":null,"content":"<p>对数据结构中的树的基础理解,涉及到了二叉树的最基本的几种形态,满二叉树,完全二叉树,霍夫曼树以及遍历等相关知识点.\n<a id=\"more\"></a>\n<img src=\"http://boomya-files.qiniudn.com/IMAG0295.jpg\" alt=\"思维导图\"></p>\n","source":"_posts/data-structure-tree-basic.md","raw":"title: 数据结构-树(基础)\ndate: 2014-10-21 18:22:15\ncategories: 数据结构\ntags: ['树', '二叉树2', '霍夫曼树']\ndescription:\n---\n对数据结构中的树的基础理解,涉及到了二叉树的最基本的几种形态,满二叉树,完全二叉树,霍夫曼树以及遍历等相关知识点.\n<!--more-->\n![思维导图](http://boomya-files.qiniudn.com/IMAG0295.jpg)\n","slug":"data-structure-tree-basic","updated":1413888268000,"excerpt":"<p>对数据结构中的树的基础理解,涉及到了二叉树的最基本的几种形态,满二叉树,完全二叉树,霍夫曼树以及遍历等相关知识点.\n","_id":"e19ryc5vcxs5dydl","comments":true,"layout":"post","photos":[],"link":""},{"title":"github初级操作(小笨蛋版本)","date":1407740233000,"categories":["d3eu0vybkmx0gi6g"],"tags":["23cmtb0dkh7x26si","ulijg6ioj65hhrlv"],"description":null,"content":"<p>github的初级操作,适用于单人使用基本的git命令操作远程github.<br><a id=\"more\"></a>  </p>\n<h3 id=\"步骤1:-登录github创建一个新的repository\">步骤1: 登录GitHub创建一个新的repository</h3><h3 id=\"步骤2:-将repository克隆到本地\">步骤2: 将repository克隆到本地</h3><p>找到新创建的repository, 复制SSH的URL, 打开命令行窗口输入命令    </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"title\">git</span> clone git<span class=\"variable\">@github</span>.com:keainono/keainono.github.io.git</div></pre></td></tr></table></figure>\n\n\n<p>现在在本地有了一个映射到GitHub远程的空的repository.  </p>\n<h3 id=\"步骤3:-操作本地repository\">步骤3: 操作本地repository</h3><p>进入本地的repository, 增加或者修改一些文件  </p>\n<h3 id=\"步骤4:-提交\">步骤4: 提交</h3><p>打开命令行窗口</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add <span class=\"keyword\">*</span> <span class=\"comment\">#这里的*是通配符,是指所有文件,也可以换成具体的文件名</span></div><div class=\"line\">git commit -m <span class=\"string\">\"BALABALA...\"</span> <span class=\"comment\">#注意,这里引号里的备注内容不可以为空,必须要填,否则会提交失败</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"步骤5:-提交到远程repository\">步骤5: 提交到远程repository</h3><p>以上的操作只是在维护本地的版本,没有提交到远程的仓库,也就是说远程的仓库还是旧的,现在提交到远程</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"keyword\">push</span> origin master <span class=\"comment\">#origin是远程仓库默认的别名, master指的是远程的仓库的主干, 类似于svn的trunk</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"小笨蛋看懂了吗-^o^\">小笨蛋看懂了吗 ^o^</h3>","source":"_posts/git-beginner.md","raw":"title: github初级操作(小笨蛋版本)\ndate: 2014-08-11 14:57:13\ncategories: git\ntags: ['git', 'github']\ndescription:\n---\ngithub的初级操作,适用于单人使用基本的git命令操作远程github.  \n<!--more-->  \n###步骤1: 登录GitHub创建一个新的repository### \n###步骤2: 将repository克隆到本地###    \n找到新创建的repository, 复制SSH的URL, 打开命令行窗口输入命令    \n```\ngit clone git@github.com:keainono/keainono.github.io.git \n```  \n现在在本地有了一个映射到GitHub远程的空的repository.  \n###步骤3: 操作本地repository###  \n进入本地的repository, 增加或者修改一些文件  \n###步骤4: 提交###  \n打开命令行窗口\n```\ngit add * #这里的*是通配符,是指所有文件,也可以换成具体的文件名\ngit commit -m \"BALABALA...\" #注意,这里引号里的备注内容不可以为空,必须要填,否则会提交失败\n```\n###步骤5: 提交到远程repository###\n以上的操作只是在维护本地的版本,没有提交到远程的仓库,也就是说远程的仓库还是旧的,现在提交到远程\n```\ngit push origin master #origin是远程仓库默认的别名, master指的是远程的仓库的主干, 类似于svn的trunk\n```\n\n\n###小笨蛋看懂了吗 ^o^ ###\n\n","slug":"git-beginner","updated":1407741065000,"excerpt":"<p>github的初级操作,适用于单人使用基本的git命令操作远程github.<br>","_id":"25tk03ghjlxwzceb","comments":true,"layout":"post","photos":[],"link":""},{"title":"JDK-ArrayList","date":1407589173000,"categories":["fe8bobv6wgutfz8v"],"tags":["hosyc30omo8hbggc","4nqlhujy9vesdhdd"],"description":"ArrayList 是最常用的容器类,内部实现是看名字就知道是用的数组,一直再用从来没有看过内部的实现细节,今天学习一下.","content":"<p>ArrayList 是最常用的容器类,内部实现是看名字就知道是用的数组,一直再用从来没有看过内部的实现细节,今天学习一下.\n<a id=\"more\"></a>\n<em>ArrayList</em> 是最常用的容器类,内部实现是看名字就知道是用的数组,一直再用从来没有看过内部的实现细节,今天学习一下.\n打开 <em>ArrayList</em> 最开始的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> Object[] elementData;</div></pre></td></tr></table></figure>\n\n<p>果然是通过数组来保存数据.<br><strong>transient</strong> 是指明这个变量不要被序列化.</p>\n<h3 id=\"1.关于遍历\">1.关于遍历</h3><p>常用的遍历的方法就是创建迭代器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Iterator&lt;String&gt; it = list.iterator();</div><div class=\"line\"><span class=\"keyword\">while</span>(it.hasNext()){</div><div class=\"line\">    String s = it.next();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n<p>还有一种迭代器 <em>ListIterator</em> ,他继承了 <em>Iterator</em> ,除了有常规迭代器的方法还有 <em>hasPrevious()</em> 和 <em>previous()</em> 方法,提供了向前遍历.</p>\n<h3 id=\"2.concurrentmodificationexception\">2.ConcurrentModificationException</h3><p>在操作 <em>ArrayList</em> 时经常会发生 <em>ConcurrentModificationException</em> ,比如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Iterator&lt;String&gt; it = list.iterator();</div><div class=\"line\"><span class=\"keyword\">while</span>(it.hasNext()){</div><div class=\"line\">    String s = it.next();</div><div class=\"line\">    list.remove(s); <span class=\"comment\">//list.add(s);</span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>在遍历 <em>ArrayList</em> 过程中执行移除或添加的操作就会抛出 <em>ConcurrentModificationException</em> .在 <em>ArrayList</em> 在父类 <em>AbstractList</em> 有一个变量 <em>modCount</em> ,这个值在 <em>ArrayList</em> 执行移除或者添加方法时会执行 <em>modCount++</em> 操作,在创建迭代器时 <code>Iterator&lt;String&gt; it = list.iterator();</code> 会把 <em>modCount</em> 传入到迭代器中并保存一份副本 <code>int expectedModCount = modCount;</code>,迭代器在遍历过程中调用 <em>next()</em> 方法时会执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> checkForComodification() {</div><div class=\"line\">\t<span class=\"keyword\">if</span> (modCount != expectedModCount)</div><div class=\"line\">\t    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConcurrentModificationException();</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>因为在遍历过程中执行了移除或者添加方法,改变了 <em>modCount</em> 的值,所以 <em>modCount</em> 和 <em>expectedModCount</em> 不匹配,抛出 <em>ConcurrentModificationException</em> .<br>解决方案:  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Iterator&lt;String&gt; it = list.iterator();</div><div class=\"line\"><span class=\"keyword\">while</span>(it.hasNext()){</div><div class=\"line\">    String s = it.next();</div><div class=\"line\">    it.remove(); </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>将移除方法改为迭代器的移除方法,就不会抛出异常,因为 <em>it.remove()</em> 是通过当前的索引移除,并且在移除后会用最新的 <em>modCount</em> 更新 <em>expectedModCount</em> ,所以不会抛出异常.\n还有一种解决方案,是在遍历过程中将需要移除掉的元素保存到一个临时的ArrayList中,在遍历完成后,执行 <em>removeAll</em> 方法. </p>\n<h3 id=\"3.自动扩容\">3.自动扩容</h3><p>ArrayList是没有长度限制的,但是他内部的存储结构是数组,数组是需要固定长度的.ArrayList在添加一个元素的时候会判断是否已经大于当前数组的长度,如果大于,会创建一个新的数组,长度是当前数组长度的1.5倍,再将当前数据复制到新数组中.  </p>\n<h3 id=\"4.unsupportedoperationexception\">4.UnsupportedOperationException</h3><p>UnsupportedOperationException这个异常也很常见,在 <em>ArrayList</em> 的父类 <em>AbstractList</em> 定义了很多方法,方法体就是抛出 <em>UnsupportedOperationException</em> ,如果子类没有重写这个方法,调用的时候就会抛出这个异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span>(<span class=\"keyword\">int</span> index) {</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsupportedOperationException();</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这更像是一种编程技巧,可能会有这样一种场景,多个子类继承同一个父类,而子类之间的行为有可能不是全部相同或者说全部支持,通过上面这种方式处理,约定好一种 <em>exception</em> ,处理起来更加的优雅,易理解.</p>\n","source":"_posts/jdk-arraylist.md","raw":"title: JDK-ArrayList\ndate: 2014-08-09 20:59:33\ncategories: JDK源码\ntags: ['JDK', 'ArrayList']\ndescription: ArrayList 是最常用的容器类,内部实现是看名字就知道是用的数组,一直再用从来没有看过内部的实现细节,今天学习一下.\n---\nArrayList 是最常用的容器类,内部实现是看名字就知道是用的数组,一直再用从来没有看过内部的实现细节,今天学习一下.\n<!--more-->\n*ArrayList* 是最常用的容器类,内部实现是看名字就知道是用的数组,一直再用从来没有看过内部的实现细节,今天学习一下.\n打开 *ArrayList* 最开始的代码\n```java\nprivate transient Object[] elementData;\n```\n果然是通过数组来保存数据.    \n**transient** 是指明这个变量不要被序列化.\n\n###1.关于遍历  \n常用的遍历的方法就是创建迭代器\n```java\nIterator<String> it = list.iterator();\nwhile(it.hasNext()){\n    String s = it.next();\n}\n```  \n还有一种迭代器 *ListIterator* ,他继承了 *Iterator* ,除了有常规迭代器的方法还有 *hasPrevious()* 和 *previous()* 方法,提供了向前遍历.\n\n###2.ConcurrentModificationException\n在操作 *ArrayList* 时经常会发生 *ConcurrentModificationException* ,比如\n```java\nIterator<String> it = list.iterator();\nwhile(it.hasNext()){\n    String s = it.next();\n    list.remove(s); //list.add(s);\n}\n```\n在遍历 *ArrayList* 过程中执行移除或添加的操作就会抛出 *ConcurrentModificationException* .在 *ArrayList* 在父类 *AbstractList* 有一个变量 *modCount* ,这个值在 *ArrayList* 执行移除或者添加方法时会执行 *modCount++* 操作,在创建迭代器时 `Iterator<String> it = list.iterator();` 会把 *modCount* 传入到迭代器中并保存一份副本 `int expectedModCount = modCount;`,迭代器在遍历过程中调用 *next()* 方法时会执行\n```java\nfinal void checkForComodification() {\n\tif (modCount != expectedModCount)\n\t    throw new ConcurrentModificationException();\n    }\n}\n```\n因为在遍历过程中执行了移除或者添加方法,改变了 *modCount* 的值,所以 *modCount* 和 *expectedModCount* 不匹配,抛出 *ConcurrentModificationException* .  \n解决方案:  \n```java\nIterator<String> it = list.iterator();\nwhile(it.hasNext()){\n    String s = it.next();\n    it.remove(); \n}\n```\n将移除方法改为迭代器的移除方法,就不会抛出异常,因为 *it.remove()* 是通过当前的索引移除,并且在移除后会用最新的 *modCount* 更新 *expectedModCount* ,所以不会抛出异常.\n还有一种解决方案,是在遍历过程中将需要移除掉的元素保存到一个临时的ArrayList中,在遍历完成后,执行 *removeAll* 方法. \n\n###3.自动扩容  \nArrayList是没有长度限制的,但是他内部的存储结构是数组,数组是需要固定长度的.ArrayList在添加一个元素的时候会判断是否已经大于当前数组的长度,如果大于,会创建一个新的数组,长度是当前数组长度的1.5倍,再将当前数据复制到新数组中.  \n\n###4.UnsupportedOperationException\nUnsupportedOperationException这个异常也很常见,在 *ArrayList* 的父类 *AbstractList* 定义了很多方法,方法体就是抛出 *UnsupportedOperationException* ,如果子类没有重写这个方法,调用的时候就会抛出这个异常\n```java\npublic E remove(int index) {\n    throw new UnsupportedOperationException();\n}\n```\n这更像是一种编程技巧,可能会有这样一种场景,多个子类继承同一个父类,而子类之间的行为有可能不是全部相同或者说全部支持,通过上面这种方式处理,约定好一种 *exception* ,处理起来更加的优雅,易理解.","slug":"jdk-arraylist","updated":1407673860000,"excerpt":"<p>ArrayList 是最常用的容器类,内部实现是看名字就知道是用的数组,一直再用从来没有看过内部的实现细节,今天学习一下.\n","_id":"r1gjyknpiegdjgt2","comments":true,"layout":"post","photos":[],"link":""},{"title":"JDK-HashMap","date":1407673811000,"categories":["fe8bobv6wgutfz8v"],"tags":["hosyc30omo8hbggc","ehms4dc85ebh2a2t"],"description":null,"content":"<p>HashMap 也是一个经常用到的集合类, 有几个很基础的特性, 比方说key和value支持NULL, 不是同步安全, 可以自动扩容等.\n<a id=\"more\"></a>\n<em>HashMap</em> 也是一个经常用到的集合类, 有几个很基础的特性, 比方说key和value支持NULL, 不是同步安全, 可以自动扩容等. 我们现在来看一下具体的代码.  </p>\n<h3 id=\"1.-存储结构\">1. 存储结构</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"javadoc\">/**</span></div><div class=\"line\">* The table, resized as necessary. Length MUST Always be a power of two.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">transient</span> Entry&lt;K,V&gt;[] table;</div></pre></td></tr></table></figure>\n\n<p><em>HashMap</em> 在内部维护着 <em>Entry</em> 类型的数组, 所有需要保存的元素都是存储在这里的. <em>Entry</em> 是 <em>HashMap</em> 一个内部静态类, 他的结构很类似于链表, 这也决定了当 <em>HashMap</em> 去 <em>put</em> 一个元素, 发生碰撞时就是通过链表去解决的,后面会有详细的描述.<br><em>HashMap</em> 在初始化的时候会初始化几个值, 初始大小, 扩充因子, 以及阀值, 扩充因子决定了当 <em>HashMap</em> 阀值的大小, 当 <em>HashMap</em> 的容量超过阀值时会触发扩容的方法,固定扩容到当前大小的2倍. <em>HashMap</em> 是有最大容量限制的, 是2^32.</p>\n<h3 id=\"2.-put\">2. PUT</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span>(K key, V value) {</div><div class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> putForNullKey(value);</div><div class=\"line\">    <span class=\"keyword\">int</span> hash = hash(key);</div><div class=\"line\">    <span class=\"keyword\">int</span> i = indexFor(hash, table.length);</div><div class=\"line\">    <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class=\"keyword\">null</span>; e = e.next) {</div><div class=\"line\">        Object k;</div><div class=\"line\">        <span class=\"keyword\">if</span> (e.hash == hash && ((k = e.key) == key || key.equals(k))) {</div><div class=\"line\">            V oldValue = e.value;</div><div class=\"line\">            e.value = value;</div><div class=\"line\">            e.recordAccess(<span class=\"keyword\">this</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> oldValue;</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    modCount++;</div><div class=\"line\">    addEntry(hash, key, value, i);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><em>HashMap</em> 单独对 <em>NULL</em> 的情况做了处理, 所以可以支持 <em>key</em> 或者 <em>value</em> 为 <em>NULL</em>. <strong><em>int hash = hash(key); int i = indexFor(hash, table.length);</em></strong> 这里计算这个 <em>key</em> 要放的位置的索引, 先是计算 <em>Hash值</em> , 再用 <em>Hash值</em> 和当前的长度做与运算计算出正确的位置(以前一直以为是取模原来是做的与运算).\n还需要注意一点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> addEntry(<span class=\"keyword\">int</span> hash, K key, V value, <span class=\"keyword\">int</span> bucketIndex) {</div><div class=\"line\">    <span class=\"keyword\">if</span> ((size &gt;= threshold) && (<span class=\"keyword\">null</span> != table[bucketIndex])) {</div><div class=\"line\">        resize(<span class=\"number\">2</span> * table.length);</div><div class=\"line\">        hash = (<span class=\"keyword\">null</span> != key) ? hash(key) : <span class=\"number\">0</span>;</div><div class=\"line\">        bucketIndex = indexFor(hash, table.length);</div><div class=\"line\">    }</div><div class=\"line\">    createEntry(hash, key, value, bucketIndex);</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>在 <em>PUT</em> 元素到 <em>HashMap</em> 之前会先做一次容量的判断, 如果当前的容量超过阀值会触发扩容方法, 扩容方法会做2件事, 1是将当前 <em>Entry</em> 数组的容易扩大为2倍, 2将当前的数据迁移到新的 <em>Entry</em> 数组中. 然后会重新计算要 <em>PUT</em> 的位置索引值. 在 <em>PUT</em> 时, 如果当前位置已经有一个 <em>Entry</em> 了, 会把这个 <em>Entry</em> 取出来当做新 <em>Entry</em> 的下一个元素, 形成了一个链表. 整个的 <em>PUT</em> 方法是没有同步锁的, 而且计算位置与插入数据是分开的步骤去做的, 所以在并发的情况, 如果有个多线程同时在写就会发生计算的位置不准确的问题, 后面会实例代码.</p>\n<h3 id=\"3.-get\">3. GET</h3><p><em>GET</em> 方法相对没有那么复杂, 也是会对 <em>NULL</em> 进行特殊的处理. 在计算出位置的索引后, 如果取出的是一个链表还需要判断 <em>key</em> 是否相同.</p>\n<h3 id=\"4.-并发\">4. 并发</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">static</span> HashMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Integer, Integer&gt;(<span class=\"number\">10</span>);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> COUNT = <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> CountDownLatch START_SIGNAL = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> CountDownLatch END_SIGNAL = <span class=\"keyword\">new</span> CountDownLatch(COUNT);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> AtomicInteger count = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Runnable task = <span class=\"keyword\">new</span> Runnable(){</div><div class=\"line\">        <span class=\"annotation\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span>() {</div><div class=\"line\">            <span class=\"keyword\">try</span> {</div><div class=\"line\">                START_SIGNAL.await();</div><div class=\"line\">            } <span class=\"keyword\">catch</span> (InterruptedException e) {</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            }</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++){</div><div class=\"line\">                map.put(i, i);</div><div class=\"line\">            }</div><div class=\"line\">            count.incrementAndGet();</div><div class=\"line\">            END_SIGNAL.countDown();</div><div class=\"line\">        }</div><div class=\"line\">    };</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span>(String[] args){</div><div class=\"line\">        ExecutorService services = Executors.newFixedThreadPool(COUNT);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;COUNT; i++){</div><div class=\"line\">            services.execute(task);</div><div class=\"line\">        }</div><div class=\"line\">        START_SIGNAL.countDown();</div><div class=\"line\">        <span class=\"keyword\">try</span> {</div><div class=\"line\">            END_SIGNAL.await();</div><div class=\"line\">            System.out.println(count.get() + <span class=\"string\">\" \"</span> + map.size());</div><div class=\"line\"></div><div class=\"line\">            Set&lt;Integer&gt; keySet = map.keySet();</div><div class=\"line\">            <span class=\"keyword\">for</span>(Integer key:keySet){</div><div class=\"line\">                Integer value = map.get(key);</div><div class=\"line\">                System.out.println(key + <span class=\"string\">\" \"</span> + value);</div><div class=\"line\">            }</div><div class=\"line\">        } <span class=\"keyword\">catch</span> (InterruptedException e) {</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        } <span class=\"keyword\">catch</span> (Exception ex){</div><div class=\"line\">            ex.printStackTrace();</div><div class=\"line\">        }</div><div class=\"line\">        services.shutdown();</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Resul<span class=\"variable\">t:</span></div><div class=\"line\"><span class=\"number\">10</span> <span class=\"number\">13</span></div><div class=\"line\"><span class=\"number\">0</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">0</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span> <span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">3</span> <span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span> <span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">5</span> <span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">6</span> <span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">7</span> <span class=\"number\">7</span></div><div class=\"line\"><span class=\"number\">8</span> <span class=\"number\">8</span></div><div class=\"line\"><span class=\"number\">9</span> <span class=\"number\">9</span></div></pre></td></tr></table></figure>\n\n<p>看到中间会出现重复的key, 这就是出现问题了, 如果换成 <em>Hashtable</em> 就不会出现这个问题, 因为 <em>Hashtable</em> 的 <em>PUT</em> 方法添加了修饰符 <em>synchronized</em>.</p>\n","source":"_posts/jdk-hashmap.md","raw":"title: JDK-HashMap\ndate: 2014-08-10 20:30:11\ncategories: JDK源码\ntags: ['JDK', 'HashMap']\ndescription:\n---\nHashMap 也是一个经常用到的集合类, 有几个很基础的特性, 比方说key和value支持NULL, 不是同步安全, 可以自动扩容等.\n<!--more-->\n*HashMap* 也是一个经常用到的集合类, 有几个很基础的特性, 比方说key和value支持NULL, 不是同步安全, 可以自动扩容等. 我们现在来看一下具体的代码.  \n###1. 存储结构\n```java\n/**\n* The table, resized as necessary. Length MUST Always be a power of two.\n*/\ntransient Entry<K,V>[] table;\n```\n*HashMap* 在内部维护着 *Entry* 类型的数组, 所有需要保存的元素都是存储在这里的. *Entry* 是 *HashMap* 一个内部静态类, 他的结构很类似于链表, 这也决定了当 *HashMap* 去 *put* 一个元素, 发生碰撞时就是通过链表去解决的,后面会有详细的描述.  \n*HashMap* 在初始化的时候会初始化几个值, 初始大小, 扩充因子, 以及阀值, 扩充因子决定了当 *HashMap* 阀值的大小, 当 *HashMap* 的容量超过阀值时会触发扩容的方法,固定扩容到当前大小的2倍. *HashMap* 是有最大容量限制的, 是2^32.\n\n###2. PUT\n```java\npublic V put(K key, V value) {\n    if (key == null)\n        return putForNullKey(value);\n    int hash = hash(key);\n    int i = indexFor(hash, table.length);\n    for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n        Object k;\n        if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n            V oldValue = e.value;\n            e.value = value;\n            e.recordAccess(this);\n            return oldValue;\n        }\n    }\n    modCount++;\n    addEntry(hash, key, value, i);\n    return null;\n}\n```\n*HashMap* 单独对 *NULL* 的情况做了处理, 所以可以支持 *key* 或者 *value* 为 *NULL*. ***int hash = hash(key); int i = indexFor(hash, table.length);*** 这里计算这个 *key* 要放的位置的索引, 先是计算 *Hash值* , 再用 *Hash值* 和当前的长度做与运算计算出正确的位置(以前一直以为是取模原来是做的与运算).\n还需要注意一点\n```java\nvoid addEntry(int hash, K key, V value, int bucketIndex) {\n    if ((size >= threshold) && (null != table[bucketIndex])) {\n        resize(2 * table.length);\n        hash = (null != key) ? hash(key) : 0;\n        bucketIndex = indexFor(hash, table.length);\n    }\n    createEntry(hash, key, value, bucketIndex);\n}\n```\n在 *PUT* 元素到 *HashMap* 之前会先做一次容量的判断, 如果当前的容量超过阀值会触发扩容方法, 扩容方法会做2件事, 1是将当前 *Entry* 数组的容易扩大为2倍, 2将当前的数据迁移到新的 *Entry* 数组中. 然后会重新计算要 *PUT* 的位置索引值. 在 *PUT* 时, 如果当前位置已经有一个 *Entry* 了, 会把这个 *Entry* 取出来当做新 *Entry* 的下一个元素, 形成了一个链表. 整个的 *PUT* 方法是没有同步锁的, 而且计算位置与插入数据是分开的步骤去做的, 所以在并发的情况, 如果有个多线程同时在写就会发生计算的位置不准确的问题, 后面会实例代码.\n\n###3. GET\n*GET* 方法相对没有那么复杂, 也是会对 *NULL* 进行特殊的处理. 在计算出位置的索引后, 如果取出的是一个链表还需要判断 *key* 是否相同.\n\n###4. 并发\n```java\npublic class App {\n    static HashMap<Integer, Integer> map = new HashMap<Integer, Integer>(10);\n    final static int COUNT = 10;\n    final static CountDownLatch START_SIGNAL = new CountDownLatch(1);\n    final static CountDownLatch END_SIGNAL = new CountDownLatch(COUNT);\n    final static AtomicInteger count = new AtomicInteger(0);\n    final static Runnable task = new Runnable(){\n        @Override\n        public void run() {\n            try {\n                START_SIGNAL.await();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            for(int i=0; i<10; i++){\n                map.put(i, i);\n            }\n            count.incrementAndGet();\n            END_SIGNAL.countDown();\n        }\n    };\n    public static void main(String[] args){\n        ExecutorService services = Executors.newFixedThreadPool(COUNT);\n        for(int i=0; i<COUNT; i++){\n            services.execute(task);\n        }\n        START_SIGNAL.countDown();\n        try {\n            END_SIGNAL.await();\n            System.out.println(count.get() + \" \" + map.size());\n\n            Set<Integer> keySet = map.keySet();\n            for(Integer key:keySet){\n                Integer value = map.get(key);\n                System.out.println(key + \" \" + value);\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } catch (Exception ex){\n            ex.printStackTrace();\n        }\n        services.shutdown();\n    }\n}\n```\n```\nResult:\n10 13\n0 0\n0 0\n1 1\n2 2\n3 3\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n```\n看到中间会出现重复的key, 这就是出现问题了, 如果换成 *Hashtable* 就不会出现这个问题, 因为 *Hashtable* 的 *PUT* 方法添加了修饰符 *synchronized*.\n","slug":"jdk-hashmap","updated":1407675224000,"excerpt":"<p>HashMap 也是一个经常用到的集合类, 有几个很基础的特性, 比方说key和value支持NULL, 不是同步安全, 可以自动扩容等.\n","_id":"zsmvbgzt8z9o4z5w","comments":true,"layout":"post","photos":[],"link":""},{"title":"JVM-debug","date":1407675573000,"categories":["s5ffapec432gusyh"],"tags":["wydwtrb3borppcxd","pglzzxeupgp8ym65"],"description":null,"content":"<p>大家都有过遇到线上程序LOAD突然狂飙的场景，要排查到为何狂飙，我们当务之急就是要找到导致CPU飙升的原因。如果是进程级的应用，如Nginx、Apache等都还比较容易排查，但如果是JVM中的某个线程导致的，估计有人就要开始抓瞎了。\n<a id=\"more\"></a>\n大家都有过遇到线上程序LOAD突然狂飙的场景，要排查到为何狂飙，我们当务之急就是要找到导致CPU飙升的原因。如果是进程级的应用，如Nginx、Apache等都还比较容易排查，但如果是JVM中的某个线程导致的，估计有人就要开始抓瞎了。<br>很多人都或多或少的知道有这么一个脚本，能帮你大致定位到现场导致LOAD飙升的JVM线程，脚本大概如下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"shebang\">#!/bin/ksh</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">typeset</span> top=$\\{<span class=\"number\">1</span>:-<span class=\"number\">10</span>\\}</div><div class=\"line\"><span class=\"built_in\">typeset</span> pid=$\\{<span class=\"number\">2</span>:-$(pgrep -u <span class=\"variable\">$USER</span> java)\\}</div><div class=\"line\"><span class=\"built_in\">typeset</span> tmp_file=/tmp/java_$\\{pid\\}_$$.trace</div><div class=\"line\"> </div><div class=\"line\"><span class=\"variable\">$JAVA_HOME</span>/bin/jstack <span class=\"variable\">$pid</span> &gt; <span class=\"variable\">$tmp_file</span></div><div class=\"line\">ps H -eo user,pid,ppid,tid,time,%cpu --sort=%cpu --no-headers\\</div><div class=\"line\">        | tail -<span class=\"variable\">$top</span>\\</div><div class=\"line\">        | awk -v <span class=\"string\">\"pid=<span class=\"variable\">$pid</span>\"</span> <span class=\"string\">'$2==pid{print $4\"\\t\"$6}'</span>\\</div><div class=\"line\">        | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line;</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">        <span class=\"built_in\">typeset</span> nid=$(<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$line</span>\"</span>|awk <span class=\"string\">'{printf(\"0x%x\",$1)}'</span>)</div><div class=\"line\">        <span class=\"built_in\">typeset</span> cpu=$(<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$line</span>\"</span>|awk <span class=\"string\">'{print $2}'</span>)</div><div class=\"line\">        awk -v <span class=\"string\">\"cpu=<span class=\"variable\">$cpu</span>\"</span> <span class=\"string\">'/nid='</span><span class=\"string\">\"<span class=\"variable\">$nid</span>\"</span><span class=\"string\">'/,/^$/{print $0\"\\t\"(isF++?\"\":\"cpu=\"cpu\"%\");}'</span> <span class=\"variable\">$tmp_file</span></div><div class=\"line\"><span class=\"keyword\">done</span></div><div class=\"line\"> </div><div class=\"line\">rm <span class=\"operator\">-f</span> <span class=\"variable\">$tmp_file</span></div></pre></td></tr></table></figure>\n\n<p>现在我们就来拆解其中的原理，以及说明下类似脚本的适用范围。</p>\n<h4 id=\"步骤1：dump当前jvm线程，保存现场\">步骤1：dump当前JVM线程，保存现场</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"input\"><span class=\"prompt\">$JAVA_HOME/bin/jstack $pid &gt;</span> <span class=\"variable\">$tmp_file</span></span></div></pre></td></tr></table></figure>\n\n\n<p>保存现场是相当的重要，因为问题转瞬之间就会从手中溜走（但其实LOAD的统计机制也决定了，事实也并不是那么严格）</p>\n<h4 id=\"步骤2：找到当前cpu使用占比高的线程\">步骤2：找到当前CPU使用占比高的线程</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps H -eo user,pid,ppid,tid,<span class=\"keyword\">time</span>,<span class=\"variable\">%cpu</span> --<span class=\"keyword\">sort</span>=<span class=\"variable\">%cpu</span></div></pre></td></tr></table></figure>\n\n<p><img src=\"http://img4.tbcdn.cn/L1/461/1/b_12679_1389500395_604324404.png\" alt=\"\"><br>列说明<br>USER：进程归属用户<br>PID：进程号<br>PPID：父进程号<br>TID：线程号<br>%CPU：线程使用CPU占比（这里要提醒下各位，这个CPU占比是通过/proc计算得到，存在时间差）</p>\n<h4 id=\"步骤3：合并相关信息\">步骤3：合并相关信息</h4><p>我们需要关注的大概是3列：PID、TID、%CPU，我们通过PS拿到了TID，可以通过进制换算10-16得到jstack出来的JVM线程号​</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">typeset</span> nid=<span class=\"string\">\"0x\"</span>$(<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$line</span>\"</span>|awk <span class=\"string\">'{print $1}'</span>|xargs -I{} <span class=\"built_in\">echo</span> <span class=\"string\">\"obase=16;{}\"</span>|bc|tr <span class=\"string\">'A-Z'</span> <span class=\"string\">'a-z'</span>)</div></pre></td></tr></table></figure>\n\n<p><img src=\"http://img4.tbcdn.cn/L1/461/1/b_12679_1389501427_1335323358.png\" alt=\"\"> </p>\n<h4 id=\"适用范围说明\">适用范围说明</h4><p>看似这个脚本很牛X的样子，能直接定位到最耗费CPU的线程，开发再也不用担心找不到线上最有问题的代码～但，且慢，姑且注意下输出的结果，State: WAITING 这是这个啥节奏～<br>这是因为ps中的%CPU数据统计来自于/proc/stat，这个份数据并非实时的，而是取决于OS对其更新的频率，一般为1S。所以你看到的数据统计会和jstack出来的信息不一致也就是这个原因～但这份信息对持续LOAD由少数几个线程导致的问题排查还是非常给力的，因为这些固定少数几个线程会持续消耗CPU的资源，即使存在时间差，反正也都是这几个线程所导致。</p>\n","source":"_posts/jvm-debug.md","raw":"title: JVM-debug\ndate: 2014-08-10 20:59:33\ncategories: debug\ntags: ['JVM', 'debug']\ndescription:\n---\n大家都有过遇到线上程序LOAD突然狂飙的场景，要排查到为何狂飙，我们当务之急就是要找到导致CPU飙升的原因。如果是进程级的应用，如Nginx、Apache等都还比较容易排查，但如果是JVM中的某个线程导致的，估计有人就要开始抓瞎了。\n<!--more-->\n大家都有过遇到线上程序LOAD突然狂飙的场景，要排查到为何狂飙，我们当务之急就是要找到导致CPU飙升的原因。如果是进程级的应用，如Nginx、Apache等都还比较容易排查，但如果是JVM中的某个线程导致的，估计有人就要开始抓瞎了。   \n很多人都或多或少的知道有这么一个脚本，能帮你大致定位到现场导致LOAD飙升的JVM线程，脚本大概如下。\n```shell\n#!/bin/ksh\n \ntypeset top=$\\{1:-10\\}\ntypeset pid=$\\{2:-$(pgrep -u $USER java)\\}\ntypeset tmp_file=/tmp/java_$\\{pid\\}_$$.trace\n \n$JAVA_HOME/bin/jstack $pid > $tmp_file\nps H -eo user,pid,ppid,tid,time,%cpu --sort=%cpu --no-headers\\\n        | tail -$top\\\n        | awk -v \"pid=$pid\" '$2==pid{print $4\"\\t\"$6}'\\\n        | while read line;\ndo\n        typeset nid=$(echo \"$line\"|awk '{printf(\"0x%x\",$1)}')\n        typeset cpu=$(echo \"$line\"|awk '{print $2}')\n        awk -v \"cpu=$cpu\" '/nid='\"$nid\"'/,/^$/{print $0\"\\t\"(isF++?\"\":\"cpu=\"cpu\"%\");}' $tmp_file\ndone\n \nrm -f $tmp_file\n```\n现在我们就来拆解其中的原理，以及说明下类似脚本的适用范围。\n####步骤1：dump当前JVM线程，保存现场\n```shell\n$JAVA_HOME/bin/jstack $pid > $tmp_file \n```  \n保存现场是相当的重要，因为问题转瞬之间就会从手中溜走（但其实LOAD的统计机制也决定了，事实也并不是那么严格）\n####步骤2：找到当前CPU使用占比高的线程\n```shell \nps H -eo user,pid,ppid,tid,time,%cpu --sort=%cpu \n```\n![](http://img4.tbcdn.cn/L1/461/1/b_12679_1389500395_604324404.png)  \n列说明  \nUSER：进程归属用户  \nPID：进程号  \nPPID：父进程号  \nTID：线程号  \n%CPU：线程使用CPU占比（这里要提醒下各位，这个CPU占比是通过/proc计算得到，存在时间差）\n####步骤3：合并相关信息\n我们需要关注的大概是3列：PID、TID、%CPU，我们通过PS拿到了TID，可以通过进制换算10-16得到jstack出来的JVM线程号​\n```shell \ntypeset nid=\"0x\"$(echo \"$line\"|awk '{print $1}'|xargs -I{} echo \"obase=16;{}\"|bc|tr 'A-Z' 'a-z') \n```\n![](http://img4.tbcdn.cn/L1/461/1/b_12679_1389501427_1335323358.png) \n####适用范围说明\n看似这个脚本很牛X的样子，能直接定位到最耗费CPU的线程，开发再也不用担心找不到线上最有问题的代码～但，且慢，姑且注意下输出的结果，State: WAITING 这是这个啥节奏～  \n这是因为ps中的%CPU数据统计来自于/proc/stat，这个份数据并非实时的，而是取决于OS对其更新的频率，一般为1S。所以你看到的数据统计会和jstack出来的信息不一致也就是这个原因～但这份信息对持续LOAD由少数几个线程导致的问题排查还是非常给力的，因为这些固定少数几个线程会持续消耗CPU的资源，即使存在时间差，反正也都是这几个线程所导致。\n","slug":"jvm-debug","updated":1407675803000,"excerpt":"<p>大家都有过遇到线上程序LOAD突然狂飙的场景，要排查到为何狂飙，我们当务之急就是要找到导致CPU飙升的原因。如果是进程级的应用，如Nginx、Apache等都还比较容易排查，但如果是JVM中的某个线程导致的，估计有人就要开始抓瞎了。\n","_id":"h7ohxiv5pjktdejm","comments":true,"layout":"post","photos":[],"link":""},{"title":"linux基本命令","date":1419839823000,"categories":["l7abwq67s4vkrzh6"],"tags":["p4cganxycougs3nw","xs9ga8jgtdnklo1x","8u70xp32ao28pomh"],"description":null,"content":"<p>linux下必须要掌握的基本命令\n<a id=\"more\"></a>\nv3</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">chmod</span> +<span class=\"keyword\">x</span> * <span class=\"comment\">#给当前所有脚本赋予执行权限, 使用ll查询当前权限</span></div><div class=\"line\">jps -mlv</div><div class=\"line\">ps -ef | <span class=\"keyword\">grep</span> java</div><div class=\"line\">netstat -anp | <span class=\"keyword\">grep</span> <span class=\"number\">8080</span></div><div class=\"line\">vmstat <span class=\"number\">1</span> <span class=\"number\">30</span> <span class=\"comment\">#每秒输出一次输出30次, r运行队列(说多少个进程真的分配到CPU), b被阻塞的进程</span></div><div class=\"line\">iostat -dxk <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"comment\">#查看IO相关性能值</span></div><div class=\"line\"><span class=\"comment\">#avgqu-sz:  平均I/O队列长度。</span></div><div class=\"line\"><span class=\"comment\">#await:  平均每次设备I/O操作的等待时间 (毫秒)。</span></div><div class=\"line\"><span class=\"comment\">#svctm: 平均每次设备I/O操作的服务时间 (毫秒)。</span></div><div class=\"line\"><span class=\"comment\">#%util:  一秒中有百分之多少的时间用于 I/O 操作，即被io消耗的cpu百分比</span></div><div class=\"line\"><span class=\"comment\">#如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈。如果 svctm 比较接近 await，说明 I/O 几乎没有等待时间；如果 await 远大于 svctm，说明I/O 队列太长，io响应太慢，则需要进行必要优化。如果avgqu-sz比较大，也表示有大量io在等待。</span></div><div class=\"line\">ifstat <span class=\"comment\">#查看网卡当前流量,读入(in), 出口(out)</span></div><div class=\"line\">top -Hp <span class=\"number\">20943</span></div><div class=\"line\">ps -mp <span class=\"number\">20943</span> -o THREAD,tid <span class=\"comment\">#查找最耗CPU的线程</span></div><div class=\"line\"><span class=\"keyword\">printf</span> <span class=\"string\">\"<span class=\"variable\">%x</span>\\n\"</span> <span class=\"number\">21742</span> <span class=\"comment\">#10进制转16进制</span></div><div class=\"line\">jstack <span class=\"number\">20943</span> | <span class=\"keyword\">grep</span> <span class=\"number\">5</span>dee <span class=\"comment\">#输出指定线程的栈信息</span></div><div class=\"line\">jmap -heap <span class=\"number\">20943</span> <span class=\"comment\">#输出堆内存信息</span></div><div class=\"line\">jmap -histo:live <span class=\"number\">20943</span> <span class=\"comment\">#输出活着的对象数目. </span></div><div class=\"line\">B  byte</div><div class=\"line\">C  char</div><div class=\"line\">D  double</div><div class=\"line\">F  float</div><div class=\"line\">I  <span class=\"keyword\">int</span></div><div class=\"line\">J  long</div><div class=\"line\">Z  boolean</div><div class=\"line\">[  数组，如[I表示<span class=\"keyword\">int</span>[]</div><div class=\"line\">[L+类名 其他对象</div><div class=\"line\">jmap -<span class=\"keyword\">dump</span>:<span class=\"keyword\">format</span>=b,file=<span class=\"regexp\">/tmp/dump</span>.dat <span class=\"number\">21711</span></div><div class=\"line\">jstat -gc <span class=\"number\">20943</span> <span class=\"number\">250</span> <span class=\"number\">4</span> <span class=\"comment\">#每隔250秒取样1次.取4次</span></div><div class=\"line\">S0C    S1C    S0U    S1U      EC       EU        OC         OU       PC     PU    YGC     YGCT    FGC    FGCT     GCT  </div><div class=\"line\">S0C、S1C、S0U、S1U：Survivor <span class=\"number\">0</span>/<span class=\"number\">1</span>区容量（Capacity）和使用量（Used）</div><div class=\"line\">EC、EU：Eden区容量和使用量</div><div class=\"line\">OC、OU：年老代容量和使用量</div><div class=\"line\">PC、PU：永久代容量和使用量</div><div class=\"line\">YGC、YGT：年轻代GC次数和GC耗时</div><div class=\"line\">FGC、FGCT：Full GC次数和Full GC耗时</div><div class=\"line\">GCT：GC总耗时</div></pre></td></tr></table></figure>\n\n\n","source":"_posts/linux-basic-command.md","raw":"title: linux基本命令\ndate: 2014-12-29 15:57:03\ncategories: linux\ntags: ['linux', 'command', '日常']\ndescription:\n---\nlinux下必须要掌握的基本命令\n<!--more-->\nv3\n```shell\nchmod +x * #给当前所有脚本赋予执行权限, 使用ll查询当前权限\njps -mlv\nps -ef | grep java\nnetstat -anp | grep 8080\nvmstat 1 30 #每秒输出一次输出30次, r运行队列(说多少个进程真的分配到CPU), b被阻塞的进程\niostat -dxk 1 1 #查看IO相关性能值\n#avgqu-sz:  平均I/O队列长度。\n#await:  平均每次设备I/O操作的等待时间 (毫秒)。\n#svctm: 平均每次设备I/O操作的服务时间 (毫秒)。\n#%util:  一秒中有百分之多少的时间用于 I/O 操作，即被io消耗的cpu百分比\n#如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈。如果 svctm 比较接近 await，说明 I/O 几乎没有等待时间；如果 await 远大于 svctm，说明I/O 队列太长，io响应太慢，则需要进行必要优化。如果avgqu-sz比较大，也表示有大量io在等待。\nifstat #查看网卡当前流量,读入(in), 出口(out)\ntop -Hp 20943\nps -mp 20943 -o THREAD,tid #查找最耗CPU的线程\nprintf \"%x\\n\" 21742 #10进制转16进制\njstack 20943 | grep 5dee #输出指定线程的栈信息\njmap -heap 20943 #输出堆内存信息\njmap -histo:live 20943 #输出活着的对象数目. \nB  byte\nC  char\nD  double\nF  float\nI  int\nJ  long\nZ  boolean\n[  数组，如[I表示int[]\n[L+类名 其他对象\njmap -dump:format=b,file=/tmp/dump.dat 21711\njstat -gc 20943 250 4 #每隔250秒取样1次.取4次\nS0C    S1C    S0U    S1U      EC       EU        OC         OU       PC     PU    YGC     YGCT    FGC    FGCT     GCT  \nS0C、S1C、S0U、S1U：Survivor 0/1区容量（Capacity）和使用量（Used）\nEC、EU：Eden区容量和使用量\nOC、OU：年老代容量和使用量\nPC、PU：永久代容量和使用量\nYGC、YGT：年轻代GC次数和GC耗时\nFGC、FGCT：Full GC次数和Full GC耗时\nGCT：GC总耗时 \n``` \n","slug":"linux-basic-command","updated":1419844984000,"excerpt":"<p>linux下必须要掌握的基本命令\n","_id":"slkuh1t29q7n9xo7","comments":true,"layout":"post","photos":[],"link":""},{"title":"solr由浅入深-1","date":1420291347000,"categories":["w1k4bjsef96nr87p"],"tags":["77cl3aj17uozsfdy","jvl6vu2dhdcmseml","53lfbdfn03ttpf03"],"description":null,"content":"<p>solr由浅入深系列-1<br>搭建最简solr环境\n<a id=\"more\"></a></p>\n<h1 id=\"solr搭建说明\">solr搭建说明</h1><h3 id=\"概要\">概要</h3><hr>\n<p>solr可以单机部署也可以结合zookeeper实现分布式集群(solrCloud). solr内嵌了zookeeper,在启动solr的同时也会启动zookeeper,使用内嵌的zookeeper有几个缺点,1.集群中增加新的节点时需要同时增加zookeeper, 2.当某个节点挂掉需要重启时,同时也会重启zookeeper,造成了集群的不稳定.所以推荐使用独立的zookeeper集群,会在部署过程中麻烦些,不过提高了集群的稳定性.</p>\n<h3 id=\"运行(简单集群)\">运行(简单集群)</h3><hr>\n<p>run:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/solr start <span class=\"operator\">-e</span> cloud -noprompt</div></pre></td></tr></table></figure>\n\n<p>终端显示  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Welcome to the SolrCloud example!</div><div class=\"line\">Starting up <span class=\"number\">2</span> Solr nodes <span class=\"keyword\">for</span> your example SolrCloud cluster.</div><div class=\"line\">...</div><div class=\"line\">Started Solr server on port <span class=\"number\">8983</span> (pid=<span class=\"number\">8404</span>). Happy searching!</div><div class=\"line\">...</div><div class=\"line\">Started Solr server on port <span class=\"number\">7574</span> (pid=<span class=\"number\">8549</span>). Happy searching!</div><div class=\"line\">...</div><div class=\"line\">SolrCloud example running, please visit http://localhost:<span class=\"number\">8983</span>/solr</div></pre></td></tr></table></figure>\n\n<p>自动生成2个index\n<img src=\"http://lucene.apache.org/solr/assets/images/quickstart-solrcloud.png\" alt=\"shard\"></p>\n<h3 id=\"数据导入\">数据导入</h3><hr>\n<p>run:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -classpath dist/solr-core-<span class=\"number\">4.10</span>.<span class=\"number\">3</span>.jar -Dauto -Drecursive org.apache.solr.util.SimplePostTool docs/</div></pre></td></tr></table></figure>\n\n<p><em>SimplePostTool</em>是solr提供的一个支持多种文件格式的导入工具.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Posting files to base url http://localhost:<span class=\"number\">8983</span>/solr/update..</div><div class=\"line\">Entering auto mode. File endings considered are xml,json,csv,pdf,doc,docx,ppt,pptx,xls,xlsx,odt,odp,ods,ott,otp,ots,rtf,htm,html,txt,log</div><div class=\"line\">Entering recursive mode, max depth=<span class=\"number\">999</span>, delay=<span class=\"number\">0</span>s</div><div class=\"line\">Indexing directory docs (<span class=\"number\">3</span> files, depth=<span class=\"number\">0</span>)</div><div class=\"line\">POSTing file index.html (text/html)</div><div class=\"line\">POSTing file SYSTEM_REQUIREMENTS.html (text/html)</div><div class=\"line\">POSTing file tutorial.html (text/html)</div><div class=\"line\">Indexing directory docs/changes (<span class=\"number\">1</span> files, depth=<span class=\"number\">1</span>)</div><div class=\"line\">POSTing file Changes.html (text/html)</div><div class=\"line\">Indexing directory docs/solr-analysis-extras (<span class=\"number\">8</span> files, depth=<span class=\"number\">1</span>)</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">2945</span> files indexed.</div><div class=\"line\">COMMITting Solr index changes to http://localhost:<span class=\"number\">8983</span>/solr/update..</div></pre></td></tr></table></figure>\n\n<p>导入并索引了2945个doc.</p>\n<h3 id=\"简单查询\">简单查询</h3><hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:<span class=\"number\">8983</span>/solr/collection1/select?q=solr&wt=json&indent=<span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/solr-1.md","raw":"title: solr由浅入深-1  \ndate: 2015-01-03 21:22:27  \ncategories: solr  \ntags: ['solr', 'java', '搜索']  \ndescription:  \n---\nsolr由浅入深系列-1  \n搭建最简solr环境\n<!--more-->\n# solr搭建说明\n\n### 概要\n---  \nsolr可以单机部署也可以结合zookeeper实现分布式集群(solrCloud). solr内嵌了zookeeper,在启动solr的同时也会启动zookeeper,使用内嵌的zookeeper有几个缺点,1.集群中增加新的节点时需要同时增加zookeeper, 2.当某个节点挂掉需要重启时,同时也会重启zookeeper,造成了集群的不稳定.所以推荐使用独立的zookeeper集群,会在部署过程中麻烦些,不过提高了集群的稳定性.\n\n### 运行(简单集群)\n---\nrun:\n\n~~~sh\nbin/solr start -e cloud -noprompt\n~~~\n终端显示  \n\n~~~sh\nWelcome to the SolrCloud example!\nStarting up 2 Solr nodes for your example SolrCloud cluster.\n...\nStarted Solr server on port 8983 (pid=8404). Happy searching!\n...\nStarted Solr server on port 7574 (pid=8549). Happy searching!\n...\nSolrCloud example running, please visit http://localhost:8983/solr\n~~~\n自动生成2个index\n![shard](http://lucene.apache.org/solr/assets/images/quickstart-solrcloud.png)\n\n###数据导入\n---\nrun:\n\n~~~sh\njava -classpath dist/solr-core-4.10.3.jar -Dauto -Drecursive org.apache.solr.util.SimplePostTool docs/\n~~~\n*SimplePostTool*是solr提供的一个支持多种文件格式的导入工具.\n\n~~~sh\nPosting files to base url http://localhost:8983/solr/update..\nEntering auto mode. File endings considered are xml,json,csv,pdf,doc,docx,ppt,pptx,xls,xlsx,odt,odp,ods,ott,otp,ots,rtf,htm,html,txt,log\nEntering recursive mode, max depth=999, delay=0s\nIndexing directory docs (3 files, depth=0)\nPOSTing file index.html (text/html)\nPOSTing file SYSTEM_REQUIREMENTS.html (text/html)\nPOSTing file tutorial.html (text/html)\nIndexing directory docs/changes (1 files, depth=1)\nPOSTing file Changes.html (text/html)\nIndexing directory docs/solr-analysis-extras (8 files, depth=1)\n...\n2945 files indexed.\nCOMMITting Solr index changes to http://localhost:8983/solr/update..\n~~~\n导入并索引了2945个doc.\n\n###简单查询\n---\n~~~sh\nhttp://localhost:8983/solr/collection1/select?q=solr&wt=json&indent=true\n~~~\n","slug":"solr-1","updated":1440037512000,"excerpt":"<p>solr由浅入深系列-1<br>搭建最简solr环境\n","_id":"gf1g4gk3a378da76","comments":true,"layout":"post","photos":[],"link":""},{"title":"solr由浅入深-2","date":1420804013000,"categories":["w1k4bjsef96nr87p"],"tags":["77cl3aj17uozsfdy","jvl6vu2dhdcmseml","53lfbdfn03ttpf03"],"description":null,"content":"<p>基本的指令介绍,包括搜索和启动.\n<a id=\"more\"></a></p>\n<h3 id=\"搜索\">搜索</h3><hr>\n<h5 id=\"单字搜索\">单字搜索</h5><p>搜索foundation</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"string\">\"http://localhost:8983/solr/collection1/select?wt=json&indent=true&q=foundation\"</span></div></pre></td></tr></table></figure>\n\n<p>限定返回的字段</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"string\">\"http://localhost:8983/solr/collection1/select?wt=json&indent=true&q=foundation&fl=id\"</span></div></pre></td></tr></table></figure>\n\n<p>针对具体的字段进入单字的匹配</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"string\">\"http://localhost:8983/solr/collection1/select?wt=json&indent=true&q=name:foundation\"</span></div></pre></td></tr></table></figure>\n\n<h5 id=\"短语搜索\">短语搜索</h5><p>搜索参数q后面跟的短语一定要放在双引号中,并且单词和单词之间的空格要使用&quot;+&quot;号代替.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"string\">\"http://localhost:8983/solr/collection1/select?wt=json&indent=true&q=\\\"CAS+latency\\\"\"</span></div></pre></td></tr></table></figure>\n\n<h5 id=\"组合搜索\">组合搜索</h5><p>需要同时包含单词lucene和单词second</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"string\">\"http://localhost:8983/solr/collection1/select?wt=json&indent=true&q=name:(%2Blucene+%2BSecond)\"</span></div></pre></td></tr></table></figure>\n\n<p>包含单词lucene并且不允许出现second</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"string\">\"http://localhost:8983/solr/collection1/select?wt=json&indent=true&q=name:(%2Blucene+-Second)\"</span></div></pre></td></tr></table></figure>\n\n<p>包含单词lucene或者second</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"string\">\"http://localhost:8983/solr/collection1/select?wt=json&indent=true&q=name:(%2Blucene-%2BSecond)\"</span></div></pre></td></tr></table></figure>\n\n<p><strong>注: &#39;+&#39; URL encode ==&gt; %2B</strong></p>\n<h3 id=\"启动\">启动</h3><hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/solr start <span class=\"comment\">#常规启动</span></div><div class=\"line\">bin/solr start <span class=\"operator\">-f</span> <span class=\"comment\">#foreground模式启动</span></div><div class=\"line\">bin/solr start -p <span class=\"number\">8383</span> <span class=\"comment\">#指定端口启动</span></div><div class=\"line\">bin/solr -i <span class=\"comment\">#查找已经启动solr实例,并显示基本信息比如版本号和内存占用</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"终止\">终止</h3><hr>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/solr stop</div><div class=\"line\">bin/solr stop -all</div></pre></td></tr></table></figure>\n\n","source":"_posts/solr-2.md","raw":"title: solr由浅入深-2\ndate: 2015-01-09 19:46:53\ncategories: solr\ntags: ['solr', 'java', '搜索']\ndescription:\n---\n基本的指令介绍,包括搜索和启动.\n<!--more-->\n###搜索\n---\n#####单字搜索\n搜索foundation\n\n~~~sh\ncurl \"http://localhost:8983/solr/collection1/select?wt=json&indent=true&q=foundation\"\n~~~\n限定返回的字段\n\n~~~sh\ncurl \"http://localhost:8983/solr/collection1/select?wt=json&indent=true&q=foundation&fl=id\"\n~~~\n针对具体的字段进入单字的匹配\n\n~~~sh\ncurl \"http://localhost:8983/solr/collection1/select?wt=json&indent=true&q=name:foundation\"\n~~~\n\n#####短语搜索\n搜索参数q后面跟的短语一定要放在双引号中,并且单词和单词之间的空格要使用\"+\"号代替.\n\n~~~sh\ncurl \"http://localhost:8983/solr/collection1/select?wt=json&indent=true&q=\\\"CAS+latency\\\"\"\n~~~\n\n#####组合搜索\n需要同时包含单词lucene和单词second\n\n~~~sh\ncurl \"http://localhost:8983/solr/collection1/select?wt=json&indent=true&q=name:(%2Blucene+%2BSecond)\"\n~~~\n\n包含单词lucene并且不允许出现second\n\n~~~sh\ncurl \"http://localhost:8983/solr/collection1/select?wt=json&indent=true&q=name:(%2Blucene+-Second)\"\n~~~\n\n包含单词lucene或者second\n\n~~~sh\ncurl \"http://localhost:8983/solr/collection1/select?wt=json&indent=true&q=name:(%2Blucene-%2BSecond)\"\n~~~\n\n**注: '+' URL encode ==> %2B**\n\n###启动\n---\n~~~sh\nbin/solr start #常规启动\nbin/solr start -f #foreground模式启动\nbin/solr start -p 8383 #指定端口启动\nbin/solr -i #查找已经启动solr实例,并显示基本信息比如版本号和内存占用\n~~~\n\n###终止\n---\n~~~sh\nbin/solr stop\nbin/solr stop -all\n~~~\n\n\n\n","slug":"solr-2","updated":1420804158000,"excerpt":"<p>基本的指令介绍,包括搜索和启动.\n","_id":"18lyq3jg4cc3tped","comments":true,"layout":"post","photos":[],"link":""},{"title":"solr由浅入深-3","date":1420804020000,"categories":["w1k4bjsef96nr87p"],"tags":["77cl3aj17uozsfdy","jvl6vu2dhdcmseml","53lfbdfn03ttpf03"],"description":null,"content":"<p>主要介绍了如何cloud模式启动Solr\n<a id=\"more\"></a></p>\n<h3 id=\"solrcloud\">SolrCloud</h3><hr>\n<h5 id=\"以cloud模式启动solr\">以cloud模式启动solr</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/solr <span class=\"operator\">-e</span> cloud <span class=\"comment\">#开启一段交互式的对话,通过以下几步使用内置的zookeeper启动solr集群</span></div><div class=\"line\"><span class=\"comment\">#1. 需要启动几个节点</span></div><div class=\"line\"><span class=\"comment\">#2. 指定每个节点的端口号</span></div><div class=\"line\"><span class=\"comment\">#3. 创建一个新的collection</span></div><div class=\"line\"><span class=\"comment\">#4. 指定分片数量. 如果不确定,建议使用2</span></div><div class=\"line\"><span class=\"comment\">#5. 指定每个分片的备份数量. 如果不确定,建议使用2</span></div><div class=\"line\"><span class=\"comment\">#6. 指定配置文件的目录. 有两种类型default和schemaless,default是example/solr/collection1/conf. schemaless是example/example-schemaless/solr/collection1/conf. default基本上包含的solr全部的配置.如果正在设计schema,需要实验一些特性的时候schemaless很有用. </span></div><div class=\"line\"></div><div class=\"line\">$ bin/solr restart -c -p <span class=\"number\">8983</span> <span class=\"operator\">-d</span> node1 <span class=\"comment\">#重启端口为8983的node1节点(使用内置zookeeper)</span></div><div class=\"line\">$ bin/solr restart -c -p <span class=\"number\">7574</span> <span class=\"operator\">-d</span> node2 -z localhost:<span class=\"number\">9983</span> <span class=\"comment\">#重启node2节点,使用独立zookeeper</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"场景1:在同一台机器启动2个分片的集群\">场景1:在同一台机器启动2个分片的集群</h3><hr>\n<h5 id=\"执行步骤:\">执行步骤:</h5><blockquote>\n<ol>\n<li>启动第一个节点,并同时启动内置的zookeeper服务器</li>\n<li>启动其他剩余节点,并指向已经启动的zookeeper服务器</li>\n</ol>\n</blockquote>\n<h5 id=\"操作流程:\">操作流程:</h5><p>启动第一个节点:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> node1</div><div class=\"line\">java -DzkRun -DnumShards=<span class=\"number\">2</span> -Dbootstrap_confdir=./solr/collection1/conf -Dcollection.configName=myconf -jar start.jar</div></pre></td></tr></table></figure>\n\n<p><strong>-DzkRun</strong> 启动内置的zookeeper服务器.如果是产品环境推荐使用独立的zookeeper服务器,使用<em>zkHost=<zookeeper host:port=\"\"></zookeeper></em>替换<em>zkRun</em>\n<strong>-DnumShards</strong> 指定分片的数量\n<strong>-Dbootstrap_confdir</strong> 指定配置文件的目录\n<strong>-Dcollection.configName</strong> 指定存储到zookeeper服务器的配置信息的节点名字\n<strong>note:</strong> <em>-DnumShards, -Dbootstrap_confdir 和 -Dcollection.configName</em>只需要在第一次启动时指定,如果后面再运行会从zookeeper加载</p>\n<p>启动其他节点:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> node2</div><div class=\"line\">java -Djetty.port=<span class=\"number\">7574</span> -DzkHost=localhost:<span class=\"number\">9983</span> -jar start.jar</div></pre></td></tr></table></figure>\n\n<p><strong>-Djetty.port</strong> 指定jetty端口\n<strong>-DzkHost</strong> 指定zookeeper的ip,内置zookeeper的端口是solr的端口加1000.</p>\n<p>验证SolrCloud启动是否成功,访问<a href=\"http://localhost:8983/solr/#/~cloud\" target=\"_blank\" rel=\"external\">http://localhost:8983/solr/#/~cloud</a>.\n<img src=\"http://boomya-files.qiniudn.com/solrcloud-1.png\" alt=\"SolrCloud\"></p>\n<p>插入数据</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -jar post.jar mem.xml</div></pre></td></tr></table></figure>\n\n<p>搜索</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:<span class=\"number\">8983</span>/solr/collection1/select?q=*:*</div><div class=\"line\">http://localhost:<span class=\"number\">7574</span>/solr/collection1/select?q=*:*</div></pre></td></tr></table></figure>\n\n<p>这两个URL返回的搜索结果的数量是相同的.\n搜索的过程是会搜索每一个分片,再将每个分片的结果组合返回.\n<strong>note:</strong> 如果带上参数<em>distrib=false</em>只会返回指定分片的结果</p>\n<h3 id=\"场景2:使用外部zookeeper启动solrcloud集群\">场景2:使用外部zookeeper启动SolrCloud集群</h3><hr>\n<h5 id=\"执行步骤:\">执行步骤:</h5><blockquote>\n<ol>\n<li>启动外部zookeeper服务</li>\n<li>启动SolrCloud并指向外部zookeeper服务器</li>\n</ol>\n</blockquote>\n<h5 id=\"操作流程:\">操作流程:</h5><p><strong>note:</strong>使用外部zookeeper服务之前,需要删除节点目录下solr/zoo_data文件夹\n启动第一个节点:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> node1</div><div class=\"line\">java -DnumShards=<span class=\"number\">2</span> -Dbootstrap_confdir=./solr/collection1/conf \\</div><div class=\"line\">   -Dcollection.configName=myconf \\</div><div class=\"line\">   -DzkHost=localhost:<span class=\"number\">2181</span>,localhost:<span class=\"number\">2182</span>,localhost:<span class=\"number\">2183</span> \\</div><div class=\"line\">   -jar start.jar</div></pre></td></tr></table></figure>\n\n<p><strong>note:</strong>参数的顺序是有要求的.DzkHost必须要在zookeeper相关参数的后面.</p>\n<p>启动其他节点:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> node2</div><div class=\"line\">java -Djetty.port=<span class=\"number\">8900</span> -DzkRun -DnumShards=<span class=\"number\">2</span> \\</div><div class=\"line\">    -DzkHost=localhost:<span class=\"number\">2181</span>,localhost:<span class=\"number\">2182</span>,localhost:<span class=\"number\">2183</span> -jar start.jar</div></pre></td></tr></table></figure>\n\n<p>验证SolrCloud启动是否成功,访问<a href=\"http://localhost:8983/solr/#/~cloud\" target=\"_blank\" rel=\"external\">http://localhost:8983/solr/#/~cloud</a>.</p>\n","source":"_posts/solr-3.md","raw":"title: solr由浅入深-3\ndate: 2015-01-09 19:47:00\ncategories: solr\ntags: ['solr', 'java', '搜索']\ndescription:\n---\n主要介绍了如何cloud模式启动Solr\n<!--more-->\n###SolrCloud\n---\n#####以cloud模式启动solr\n\n~~~sh\nbin/solr -e cloud #开启一段交互式的对话,通过以下几步使用内置的zookeeper启动solr集群\n#1. 需要启动几个节点\n#2. 指定每个节点的端口号\n#3. 创建一个新的collection\n#4. 指定分片数量. 如果不确定,建议使用2\n#5. 指定每个分片的备份数量. 如果不确定,建议使用2\n#6. 指定配置文件的目录. 有两种类型default和schemaless,default是example/solr/collection1/conf. schemaless是example/example-schemaless/solr/collection1/conf. default基本上包含的solr全部的配置.如果正在设计schema,需要实验一些特性的时候schemaless很有用. \n\n$ bin/solr restart -c -p 8983 -d node1 #重启端口为8983的node1节点(使用内置zookeeper)\n$ bin/solr restart -c -p 7574 -d node2 -z localhost:9983 #重启node2节点,使用独立zookeeper\n~~~\n\n###场景1:在同一台机器启动2个分片的集群\n---\n#####执行步骤:\n>1. 启动第一个节点,并同时启动内置的zookeeper服务器\n>2. 启动其他剩余节点,并指向已经启动的zookeeper服务器\n\n#####操作流程:\n启动第一个节点:\n\n~~~sh\ncd node1\njava -DzkRun -DnumShards=2 -Dbootstrap_confdir=./solr/collection1/conf -Dcollection.configName=myconf -jar start.jar\n~~~\n**-DzkRun** 启动内置的zookeeper服务器.如果是产品环境推荐使用独立的zookeeper服务器,使用*zkHost=<ZooKeeper Host:Port>*替换*zkRun*\n**-DnumShards** 指定分片的数量\n**-Dbootstrap_confdir** 指定配置文件的目录\n**-Dcollection.configName** 指定存储到zookeeper服务器的配置信息的节点名字\n**note:** *-DnumShards, -Dbootstrap_confdir 和 -Dcollection.configName*只需要在第一次启动时指定,如果后面再运行会从zookeeper加载\n\n启动其他节点:\n\n~~~sh\ncd node2\njava -Djetty.port=7574 -DzkHost=localhost:9983 -jar start.jar\n~~~\n**-Djetty.port** 指定jetty端口\n**-DzkHost** 指定zookeeper的ip,内置zookeeper的端口是solr的端口加1000.\n\n验证SolrCloud启动是否成功,访问http://localhost:8983/solr/#/~cloud.\n![SolrCloud](http://boomya-files.qiniudn.com/solrcloud-1.png)\n\n插入数据\n\n~~~sh\njava -jar post.jar mem.xml\n~~~\n\n搜索\n\n~~~sh\nhttp://localhost:8983/solr/collection1/select?q=*:*\nhttp://localhost:7574/solr/collection1/select?q=*:*\n~~~\n这两个URL返回的搜索结果的数量是相同的.\n搜索的过程是会搜索每一个分片,再将每个分片的结果组合返回.\n**note:** 如果带上参数*distrib=false*只会返回指定分片的结果\n\n###场景2:使用外部zookeeper启动SolrCloud集群\n---\n#####执行步骤:\n>1. 启动外部zookeeper服务\n>2. 启动SolrCloud并指向外部zookeeper服务器\n\n#####操作流程:\n**note:**使用外部zookeeper服务之前,需要删除节点目录下solr/zoo_data文件夹\n启动第一个节点:\n\n~~~sh\ncd node1\njava -DnumShards=2 -Dbootstrap_confdir=./solr/collection1/conf \\\n   -Dcollection.configName=myconf \\\n   -DzkHost=localhost:2181,localhost:2182,localhost:2183 \\\n   -jar start.jar\n~~~\n**note:**参数的顺序是有要求的.DzkHost必须要在zookeeper相关参数的后面.\n\n启动其他节点:\n\n~~~sh\ncd node2\njava -Djetty.port=8900 -DzkRun -DnumShards=2 \\\n    -DzkHost=localhost:2181,localhost:2182,localhost:2183 -jar start.jar\n~~~\n验证SolrCloud启动是否成功,访问http://localhost:8983/solr/#/~cloud.\n\n","slug":"solr-3","updated":1421314940000,"excerpt":"<p>主要介绍了如何cloud模式启动Solr\n","_id":"vpru0nqmdfd5eai1","comments":true,"layout":"post","photos":[],"link":""},{"title":"synchronized的简单用法","date":1407675841000,"categories":["1inpy0bhxyr0i04e"],"tags":["mcb9tng9n9jwmm0s","jvl6vu2dhdcmseml"],"description":null,"content":"<p>简单说明下synchronized常用的场景以及用法\n<a id=\"more\"></a>\nsynchronized可作用于instance变量、object reference（对象引用）、static函数和class literals(类名称字面常量).<br>有几个需要注意的地方</p>\n<ul>\n<li>无论synchronized关键字加在方法上还是对象上，他取得的锁都是对象，而不是把一段代码或函数当作锁,而且同步方法很可能还会被其他线程的对象访问。 </li>\n<li>每个对象只有一个锁（lock）和之相关联。 </li>\n<li><p>实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。  </p>\n</li>\n<li><p><strong>把synchronized当作函数修饰符时</strong>  </p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span>(){   </div><div class=\"line\">    <span class=\"comment\">//......  </span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>他锁定的是调用这个同步方法对象。也就是说，当一个对象P1在不同的线程中执行这个同步方法时，他们之间会形成互斥，达到同步的效果。但是这个对象所属的Class所产生的另一对象P2却能够任意调用这个被加了synchronized关键字的方法。<br>上边的示例代码等同于如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span>() {   </div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>){      <span class=\"comment\">//  (a)     </span></div><div class=\"line\">     <span class=\"comment\">//......  </span></div><div class=\"line\">    }   </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>(a)处的this指的是什么呢？他指的就是调用这个方法的对象，如P1。可见同步方法实质是将synchronized作用于object reference。那个拿到了P1对象锁的线程，才能够调用P1的同步方法，而对P2而言，P1这个锁和他毫不相干，程式也可能在这种情形下摆脱同步机制的控制，造成数据混乱。  </p>\n<ol>\n<li><strong>同步块</strong>  </li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span>(SomeObject so) {   </div><div class=\"line\"> <span class=\"keyword\">synchronized</span>(so) {   </div><div class=\"line\">  <span class=\"comment\">//......   </span></div><div class=\"line\"> }   </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这时，锁就是so这个对象，谁拿到这个锁谁就能够运行他所控制的那段代码。当有一个明确的对象作为锁时，就能够这样写程式，但当没有明确的对象作为锁，只是想让一段代码同步时，能够创建一个特别的instance变量（他得是个对象）来充当锁：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Foo implements Runnable{   </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] lock = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">0</span>];  <span class=\"comment\">// 特别的instance变量   </span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span>() {   </div><div class=\"line\">        <span class=\"keyword\">synchronized</span>(lock) { <span class=\"comment\">//...... }   </span></div><div class=\"line\">    }   </div><div class=\"line\">\t<span class=\"comment\">//......   </span></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><strong>注：零长度的byte数组对象创建起来将比任何对象都经济――查看编译后的字节码：生成零长度的byte[]对象只需3条操作码，而Object lock = new Object()则需要7行操作码。</strong></p>\n<ol>\n<li><strong>将synchronized作用于static函数</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Foo {   </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span>(){   <span class=\"comment\">// 同步的static 函数      </span></div><div class=\"line\">  <span class=\"comment\">//......   </span></div><div class=\"line\"> }   </div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span>(){   </div><div class=\"line\">        <span class=\"keyword\">synchronized</span>(Foo.class)   <span class=\"comment\">//  class literal(类名称字面常量)   </span></div><div class=\"line\"> }   </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>&emsp;&emsp;代码中的method2()方法是把class literal作为锁的情况，他和同步的static函数产生的效果是相同的，取得的锁很特别，是当前调用这个方法的对象所属的类（Class，而不再是由这个Class产生的某个具体对象了）.<br>&emsp;&emsp;记得在《Effective Java》一书中看到过将 Foo.class和 P1.getClass()用于作同步锁还不相同，不能用P1.getClass()来达到锁这个Class的目的。P1指的是由Foo类产生的对象。<br>&emsp;&emsp;能够推断：假如一个类中定义了一个synchronized的static函数A，也定义了一个synchronized 的instance函数B，那么这个类的同一对象Obj在多线程中分别访问A和B两个方法时，不会构成同步，因为他们的锁都不相同。A方法的锁是Obj所属的那个Class，而B的锁是Obj所属的这个对象。</p>\n","source":"_posts/synchronized.md","raw":"title: synchronized的简单用法\ndate: 2014-08-10 21:04:01\ncategories: java\ntags: ['synchronized', 'java']\ndescription:\n---\n简单说明下synchronized常用的场景以及用法\n<!--more-->\nsynchronized可作用于instance变量、object reference（对象引用）、static函数和class literals(类名称字面常量).  \n有几个需要注意的地方\n- 无论synchronized关键字加在方法上还是对象上，他取得的锁都是对象，而不是把一段代码或函数当作锁,而且同步方法很可能还会被其他线程的对象访问。 \n- 每个对象只有一个锁（lock）和之相关联。 \n- 实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。  \n\n1. **把synchronized当作函数修饰符时**  \n    ```java\n    public synchronized void method(){   \n        //......  \n    } \n    ```\n他锁定的是调用这个同步方法对象。也就是说，当一个对象P1在不同的线程中执行这个同步方法时，他们之间会形成互斥，达到同步的效果。但是这个对象所属的Class所产生的另一对象P2却能够任意调用这个被加了synchronized关键字的方法。  \n上边的示例代码等同于如下代码：\n```java\n    public void method() {   \n        synchronized (this){      //  (a)     \n\t        //......  \n        }   \n    }   \n```\n(a)处的this指的是什么呢？他指的就是调用这个方法的对象，如P1。可见同步方法实质是将synchronized作用于object reference。那个拿到了P1对象锁的线程，才能够调用P1的同步方法，而对P2而言，P1这个锁和他毫不相干，程式也可能在这种情形下摆脱同步机制的控制，造成数据混乱。  \n\n2. **同步块**  \n```java\n    public void method(SomeObject so) {   \n\t    synchronized(so) {   \n\t\t    //......   \n\t    }   \n    } \n```\n这时，锁就是so这个对象，谁拿到这个锁谁就能够运行他所控制的那段代码。当有一个明确的对象作为锁时，就能够这样写程式，但当没有明确的对象作为锁，只是想让一段代码同步时，能够创建一个特别的instance变量（他得是个对象）来充当锁：\n```java\n    class Foo implements Runnable{   \n        private byte[] lock = new byte[0];  // 特别的instance变量   \n        public void method() {   \n            synchronized(lock) { //...... }   \n        }   \n    \t//......   \n    }\n```\n**注：零长度的byte数组对象创建起来将比任何对象都经济――查看编译后的字节码：生成零长度的byte[]对象只需3条操作码，而Object lock = new Object()则需要7行操作码。**\n\n3. **将synchronized作用于static函数**\n```java\n    class Foo {   \n        public synchronized static void method1(){   // 同步的static 函数      \n\t\t    //......   \n\t    }   \n\t    public void method2(){   \n            synchronized(Foo.class)   //  class literal(类名称字面常量)   \n\t    }   \n    }   \n```\n&emsp;&emsp;代码中的method2()方法是把class literal作为锁的情况，他和同步的static函数产生的效果是相同的，取得的锁很特别，是当前调用这个方法的对象所属的类（Class，而不再是由这个Class产生的某个具体对象了）.  \n&emsp;&emsp;记得在《Effective Java》一书中看到过将 Foo.class和 P1.getClass()用于作同步锁还不相同，不能用P1.getClass()来达到锁这个Class的目的。P1指的是由Foo类产生的对象。   \n&emsp;&emsp;能够推断：假如一个类中定义了一个synchronized的static函数A，也定义了一个synchronized 的instance函数B，那么这个类的同一对象Obj在多线程中分别访问A和B两个方法时，不会构成同步，因为他们的锁都不相同。A方法的锁是Obj所属的那个Class，而B的锁是Obj所属的这个对象。\n","slug":"synchronized","updated":1407676355000,"excerpt":"<p>简单说明下synchronized常用的场景以及用法\n","_id":"nurv2ibt8di27mw9","comments":true,"layout":"post","photos":[],"link":""},{"title":"箴言","date":1419844828000,"categories":["dziqw8cnb043eh7n"],"tags":["8u70xp32ao28pomh"],"description":null,"content":"<p>每天读一遍\n<a id=\"more\"></a></p>\n<h4 id=\"1.-一念放下,万般自在\">1. 一念放下,万般自在</h4><h4 id=\"2.-像个男人一样去做。\">2. 像个男人一样去做。</h4><h4 id=\"3.-当你对成功的渴望就像窒息时对呼吸的渴望，那你离成功不远了。\">3. 当你对成功的渴望就像窒息时对呼吸的渴望，那你离成功不远了。</h4><h4 id=\"4.-停止抱怨，加油吧。\">4. 停止抱怨，加油吧。</h4><h4 id=\"5.-发脾气是无能的表现。\">5. 发脾气是无能的表现。</h4><h4 id=\"6.-责人先责己，事事怨他人，反衬着你的无能。没有人愿意听你的牢骚，他们只需要结果，任何事情，结果最重要。\">6. 责人先责己，事事怨他人，反衬着你的无能。没有人愿意听你的牢骚，他们只需要结果，任何事情，结果最重要。</h4><h4 id=\"7.-每天2小时，改变人生\">7. 每天2小时，改变人生</h4><h4 id=\"8.-保持空杯状态，接受新语言\">8. 保持空杯状态，接受新语言</h4><h4 id=\"9.-找回当初软件开发的激情\">9. 找回当初软件开发的激情</h4><h4 id=\"10.-宁为狮尾，不做狐头\">10. 宁为狮尾，不做狐头</h4><h4 id=\"11.-要有信心，要坚强，要坚韧\">11. 要有信心，要坚强，要坚韧</h4><h4 id=\"12.-细节是魔鬼\">12. 细节是魔鬼</h4><h4 id=\"13.-provide-options,don&#39;t-make-lame-excuses.\">13. Provide options,don&#39;t make lame excuses.</h4><h4 id=\"提供各种选择，不要找蹩脚的借口.\">提供各种选择，不要找蹩脚的借口.</h4><h4 id=\"14.-规划好你想说的东西，写出大纲，然后问你：&quot;这是否讲清了我想要说的所有内容？&quot;提炼它，直到确实如此为止。\">14. 规划好你想说的东西，写出大纲，然后问你：&quot;这是否讲清了我想要说的所有内容？&quot;提炼它，直到确实如此为止。</h4>","source":"_posts/zhenyan.md","raw":"title: 箴言\ndate: 2014-12-29 17:20:28\ncategories: other\ntags: ['日常']\ndescription:\n---\n每天读一遍\n<!--more-->\n#### 1. 一念放下,万般自在  \n#### 2. 像个男人一样去做。\n#### 3. 当你对成功的渴望就像窒息时对呼吸的渴望，那你离成功不远了。\n#### 4. 停止抱怨，加油吧。\n#### 5. 发脾气是无能的表现。\n#### 6. 责人先责己，事事怨他人，反衬着你的无能。没有人愿意听你的牢骚，他们只需要结果，任何事情，结果最重要。\n#### 7. 每天2小时，改变人生\n#### 8. 保持空杯状态，接受新语言\n#### 9. 找回当初软件开发的激情\n#### 10. 宁为狮尾，不做狐头\n#### 11. 要有信心，要坚强，要坚韧\n#### 12. 细节是魔鬼\n#### 13. Provide options,don't make lame excuses.\n####提供各种选择，不要找蹩脚的借口.\n#### 14. 规划好你想说的东西，写出大纲，然后问你：\"这是否讲清了我想要说的所有内容？\"提炼它，直到确实如此为止。\n","slug":"zhenyan","updated":1419844965000,"excerpt":"<p>每天读一遍\n","_id":"uhth8ts4j3iu5z6s","comments":true,"layout":"post","photos":[],"link":""},{"title":"2014推荐图书","date":1419859353000,"categories":["nc7fe6j0xx7mwecf"],"tags":["m0xnfqj10udnfggr"],"description":null,"content":"<p>2014推荐图书\n<a id=\"more\"></a></p>\n<h3 id=\"开发\">开发</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">书名</th>\n<th style=\"text-align:left\">点评  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>高效能程序员的修炼</strong></td>\n<td style=\"text-align:left\">一位技术牛人在博客上关于编程的方方面面的文章集合，有见地，接地气。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>编写可读代码的艺术</strong></td>\n<td style=\"text-align:left\">简单实用，代码质量提升一个等级。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>软件开发者路线图</strong></td>\n<td style=\"text-align:left\">并不是严谨意义的路线图，是一系列软技能的模式。每个模式有情景分析，问题描述,解决办法，行动指南。实用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>高效程序员的45个习惯</strong></td>\n<td style=\"text-align:left\">列举了好的和坏的做法，风趣幽默。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"杂类\">杂类</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">书名</th>\n<th style=\"text-align:left\">点评  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>逆转</strong></td>\n<td style=\"text-align:left\">无   </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>思考，快与慢</strong></td>\n<td style=\"text-align:left\">无 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>失控 : 全人类的最终命运和结局</strong></td>\n<td style=\"text-align:left\">KK在90年代预测全人类的最终命运，NB得不得了。对网络的发展也很有借鉴意义，作者被小马哥奉为座上宾。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>演说心理学 : 让你更有吸引力、说服力和影响力**</strong></td>\n<td style=\"text-align:left\">PPT和演说“集大成者”。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>乔布斯的魔力演讲</strong></td>\n<td style=\"text-align:left\">PPT和演讲中的TOP 1。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>高效能人士的思维导图</strong></td>\n<td style=\"text-align:left\">从实例中讲如何提高效率，很有操作性。讲的是思维，跟导图没有一毛钱关系。</td>\n</tr>\n</tbody>\n</table>\n","source":"_posts/2014-books.md","raw":"title: 2014推荐图书\ndate: 2014-12-29 21:22:33\ncategories: book\ntags: ['book']\ndescription:\n---\n2014推荐图书\n<!--more-->\n### 开发\n书名 | 点评  \n:----- | :-----\n**高效能程序员的修炼** | 一位技术牛人在博客上关于编程的方方面面的文章集合，有见地，接地气。\n**编写可读代码的艺术** | 简单实用，代码质量提升一个等级。\n**软件开发者路线图** | 并不是严谨意义的路线图，是一系列软技能的模式。每个模式有情景分析，问题描述,解决办法，行动指南。实用。\n**高效程序员的45个习惯** | 列举了好的和坏的做法，风趣幽默。\n\n### 杂类\n书名 | 点评  \n:----- | :-----\n**逆转** |  无   \n**思考，快与慢** | 无 \n**失控 : 全人类的最终命运和结局** |  KK在90年代预测全人类的最终命运，NB得不得了。对网络的发展也很有借鉴意义，作者被小马哥奉为座上宾。\n**演说心理学 : 让你更有吸引力、说服力和影响力**** | PPT和演说“集大成者”。\n**乔布斯的魔力演讲** | PPT和演讲中的TOP 1。\n**高效能人士的思维导图** | 从实例中讲如何提高效率，很有操作性。讲的是思维，跟导图没有一毛钱关系。\n\n\n","slug":"2014-books","updated":1419859942000,"excerpt":"<p>2014推荐图书\n","_id":"p2i1iov5dxmxuwfd","comments":true,"layout":"post","photos":[],"link":""},{"title":"算法复杂度","date":1419949015000,"categories":["t1h5vbwb4116inkp"],"tags":["o2eaigdliwz5g0w8","f8ecf2id0ao1sk3a"],"description":null,"content":"<p>算法复杂度, 时间复杂度和空间复杂度\n<a id=\"more\"></a>\n算法复杂度, 时间复杂度和空间复杂度</p>\n<h2 id=\"时间复杂度\">时间复杂度</h2><ul>\n<li><h4 id=\"理论\">理论</h4><p><strong>我们只需要知道比较两个算法,哪个算法运行的时间长或者短就可以,不需要知道多多少,也不需要知道具体的运行时间是多少.</strong><br>一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。时间频度中，n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化。\nT(n) = Ο(f(n)) 表示存在一个常数C，使得在当n趋于正无穷时总有 T(n) ≤ C * f(n)。简单来说，就是T(n)在n趋于正无穷时最大也就跟f(n)差不多大。也就是说当n趋于正无穷时T(n)的上界是C * f(n)。<br>f(n)只取最高次幂项, O(2n^2 +n +1) = (7n^2 + n) = O(n^2)<br>如果把T(n)当做一棵树，那么O(f(n))所表达的就是树干，只关心其中的主干，其他的细枝末节全都抛弃不管。<br>若算法中语句执行次数为一个常数，则时间复杂度为O(1).<br>在时间频度不相同时，时间复杂度有可能相同，如T(n)=n2+3n+4与T(n)=4n2+2n+1它们的频度不同，但时间复杂度相同，都为O(n2)。<br>按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n^2)，立方阶O(n^3),...， k次方阶O(n^k),指数阶O(2^n)。<br><strong>常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n^2)＜Ο(n^3)＜…＜Ο(2^n)＜Ο(n!)</strong><br>Ο(1)表示基本语句的执行次数是一个常数，一般来说，只要算法中不存在循环语句，其时间复杂度就是Ο(1)。其中Ο(log2n)、Ο(n)、 Ο(nlog2n)、Ο(n^2)和Ο(n^3)称为多项式时间，而Ο(2^n)和Ο(n!)称为指数时间。计算机科学家普遍认为前者（即多项式时间复杂度的算法）是有效算法，把这类问题称为P（Polynomial,多项式）类问题，而把后者（即指数时间复杂度的算法）称为NP（Non-Deterministic Polynomial, 非确定多项式）问题。  </p>\n</li>\n<li><h4 id=\"如何计算时间复杂度\">如何计算时间复杂度</h4><ol>\n<li>找出算法中的基本语句；<br>算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体。    </li>\n<li>计算基本语句的执行次数的数量级；<br>只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：增长率。  </li>\n<li>用大O记号表示算法的时间性能。<br>将基本语句执行次数的数量级放入大Ο记号中。  </li>\n</ol>\n</li>\n</ul>\n<p>例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">for</span> (i=<span class=\"number\">1</span>; i&lt;=n; i++)  </div><div class=\"line\">　　       x++;  </div><div class=\"line\">　　<span class=\"keyword\">for</span> (i=<span class=\"number\">1</span>; i&lt;=n; i++)    </div><div class=\"line\">　     　<span class=\"keyword\">for</span> (j=<span class=\"number\">1</span>; j&lt;=n; j++)  </div><div class=\"line\">　　          x++;</div></pre></td></tr></table></figure>\n\n\n<p>如果算法中包含嵌套的循环，则基本语句通常是最内层的循环体，如果算法中包含并列的循环，则将并列循环的时间复杂度相加。\n第一个for循环的时间复杂度为Ο(n)，第二个for循环的时间复杂度为Ο(n^2)，则整个算法的时间复杂度为Ο(n+n^2)=Ο(n^2)。</p>\n<ul>\n<li><h4 id=\"几个简单的分析法则\">几个简单的分析法则</h4><ol>\n<li>对于一些简单的输入输出语句或赋值语句,近似认为需要O(1)时间</li>\n<li>对于顺序结构,需要依次执行一系列语句所用的时间可采用大O下&quot;求和法则&quot;\n<strong>求和法则:是指若算法的2个部分时间复杂度分别为 T1(n)=O(f(n))和 T2(n)=O(g(n)),则 T1(n)+T2(n)=O(max(f(n), g(n)))<br>特别地,若T1(m)=O(f(m)), T2(n)=O(g(n)),则 T1(m)+T2(n)=O(f(m) + g(n))</strong></li>\n<li>对于选择结构,如if语句,它的主要时间耗费是在执行then字句或else字句所用的时间,需注意的是检验条件也需要O(1)时间</li>\n<li>对于循环结构,循环语句的运行时间主要体现在多次迭代中执行循环体以及检验循环条件的时间耗费,一般可用大O下&quot;乘法法则&quot;<br><strong>乘法法则: 是指若算法的2个部分时间复杂度分别为 T1(n)=O(f(n))和 T2(n)=O(g(n)),则 T1*T2=O(f(n)*g(n))</strong></li>\n<li>对于复杂的算法,可以将它分成几个容易估算的部分,然后利用求和法则和乘法法则技术整个算法的时间复杂度<br><strong>另外:若g(n)=O(f(n)),则O(f(n))+ O(g(n))=O(f(n))</strong></li>\n</ol>\n</li>\n<li><h4 id=\"时间复杂度示例\">时间复杂度示例</h4></li>\n</ul>\n<h5 id=\"o(1)\">O(1)</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Temp=i; i=j; j=temp;</div></pre></td></tr></table></figure>\n\n<p>如果算法的执行时间不随着问题规模n的增加而增长，即使算法中有上千条语句，其执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)。</p>\n<h5 id=\"o(n)\">O(n)</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=<span class=\"number\">0</span>;</div><div class=\"line\">   b=<span class=\"number\">1</span>;              \t(<span class=\"number\">1</span>次)</div><div class=\"line\">   <span class=\"keyword\">for</span> (i=<span class=\"number\">1</span>;i&lt;=n;i++) \t(n次)</div><div class=\"line\">   {  </div><div class=\"line\">      s=a+b;　　　　\t(n次)</div><div class=\"line\">      b=a;　　　　　\t(n次) </div><div class=\"line\">      a=s;　　　　　\t(n次)</div><div class=\"line\">   }</div></pre></td></tr></table></figure>\n\n<p>T(n)=1+4n=O(n).</p>\n<h5 id=\"o(n^2)\">O(n^2)</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sum=<span class=\"number\">0</span>；                 （<span class=\"number\">1</span>次）</div><div class=\"line\"> <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)     （n次）</div><div class=\"line\">    <span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>;j&lt;=n;j++) （n^<span class=\"number\">2</span>次）</div><div class=\"line\">     sum++；            （n^<span class=\"number\">2</span>次）</div></pre></td></tr></table></figure>\n\n<p>总的循环次数为0+1+2+...+(n-1)=n(n-1)/2\n去低阶项，去掉常数项，去掉高阶项的常参得到，所以T(n)=O(n^2)；</p>\n<h5 id=\"o(log2n)\">O(log2n)</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">i=<span class=\"number\">1</span>;     (<span class=\"number\">1</span>次)</div><div class=\"line\"><span class=\"keyword\">while</span> (i&lt;=n)</div><div class=\"line\">   i=i*<span class=\"number\">2</span>; (如果频度是m,则<span class=\"number\">2</span>^m&gt;n时退出循环,也就是m=log2n)</div></pre></td></tr></table></figure>\n\n<p>取最大值f(n)=log2n, T(n)=O(log2n)</p>\n<h5 id=\"o(n^3)\">O(n^3)</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</div><div class=\"line\">    {  </div><div class=\"line\">       <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;i;j++)  </div><div class=\"line\">       {</div><div class=\"line\">          <span class=\"keyword\">for</span>(k=<span class=\"number\">0</span>;k&lt;j;k++)</div><div class=\"line\">             x=x+<span class=\"number\">2</span>;  </div><div class=\"line\">       }</div><div class=\"line\">    }</div></pre></td></tr></table></figure>\n\n\n<p>当i=m, j=k的时候,内层循环的次数为k当i=m时, j 可以取 0,1,...,m-1 , 所以这里最内循环共进行了0+1+...+m-1=(m-1)m/2次所以,i从0取到n, 则循环共进行了: 0+(1-1)*1/2+...+(n-1)n/2=n(n+1)(n-1)/6所以时间复杂度为O(n3).</p>\n<h2 id=\"算法的空间复杂度\">算法的空间复杂度</h2><p>类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)S(n)定义为该算法所耗费的存储空间，它也是问题规模n的函数。渐近空间复杂度也常常简称为空间复杂度。\n空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。一个算法在计算机存储器上所占用的存储空间，包括存储算法本身所占用的存储空间，算法的输入输出数据所占用的存储空间和算法在运行过程中临时占用的存储空间这三个方面。</p>\n","source":"_posts/algorithm-complexity.md","raw":"title: 算法复杂度\ndate: 2014-12-30 22:16:55\ncategories: 算法\ntags: ['算法', '时间复杂度']\ndescription:\n---\n算法复杂度, 时间复杂度和空间复杂度\n<!--more-->\n算法复杂度, 时间复杂度和空间复杂度\n时间复杂度\n--------\n- ####理论   \n  **我们只需要知道比较两个算法,哪个算法运行的时间长或者短就可以,不需要知道多多少,也不需要知道具体的运行时间是多少.**  \n  一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。时间频度中，n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化。\nT(n) = Ο(f(n)) 表示存在一个常数C，使得在当n趋于正无穷时总有 T(n) ≤ C \\* f(n)。简单来说，就是T(n)在n趋于正无穷时最大也就跟f(n)差不多大。也就是说当n趋于正无穷时T(n)的上界是C \\* f(n)。  \n  f(n)只取最高次幂项, O(2n^2 +n +1) = (7n^2 + n) = O(n^2)  \n  如果把T(n)当做一棵树，那么O(f(n))所表达的就是树干，只关心其中的主干，其他的细枝末节全都抛弃不管。  \n  若算法中语句执行次数为一个常数，则时间复杂度为O(1).  \n  在时间频度不相同时，时间复杂度有可能相同，如T(n)=n2+3n+4与T(n)=4n2+2n+1它们的频度不同，但时间复杂度相同，都为O(n2)。  \n  按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(log2n),线性阶O(n), 线性对数阶O(nlog2n),平方阶O(n^2)，立方阶O(n^3),...， k次方阶O(n^k),指数阶O(2^n)。  \n  **常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n^2)＜Ο(n^3)＜…＜Ο(2^n)＜Ο(n!)**  \n  Ο(1)表示基本语句的执行次数是一个常数，一般来说，只要算法中不存在循环语句，其时间复杂度就是Ο(1)。其中Ο(log2n)、Ο(n)、 Ο(nlog2n)、Ο(n^2)和Ο(n^3)称为多项式时间，而Ο(2^n)和Ο(n!)称为指数时间。计算机科学家普遍认为前者（即多项式时间复杂度的算法）是有效算法，把这类问题称为P（Polynomial,多项式）类问题，而把后者（即指数时间复杂度的算法）称为NP（Non-Deterministic Polynomial, 非确定多项式）问题。  \n  \n- ####如何计算时间复杂度  \n\t1. 找出算法中的基本语句；  \n算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体。    \n\t2. 计算基本语句的执行次数的数量级；  \n只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：增长率。  \n\t3. 用大O记号表示算法的时间性能。  \n将基本语句执行次数的数量级放入大Ο记号中。  \n \n例\n```java\n　　for (i=1; i<=n; i++)  \n　　       x++;  \n　　for (i=1; i<=n; i++)    \n　     　for (j=1; j<=n; j++)  \n　　          x++; \n```   \n如果算法中包含嵌套的循环，则基本语句通常是最内层的循环体，如果算法中包含并列的循环，则将并列循环的时间复杂度相加。\n第一个for循环的时间复杂度为Ο(n)，第二个for循环的时间复杂度为Ο(n^2)，则整个算法的时间复杂度为Ο(n+n^2)=Ο(n^2)。\n\n- ####几个简单的分析法则\n\t1. 对于一些简单的输入输出语句或赋值语句,近似认为需要O(1)时间\n\t2. 对于顺序结构,需要依次执行一系列语句所用的时间可采用大O下\"求和法则\"\n\t**求和法则:是指若算法的2个部分时间复杂度分别为 T1(n)=O(f(n))和 T2(n)=O(g(n)),则 T1(n)+T2(n)=O(max(f(n), g(n)))  \n\t特别地,若T1(m)=O(f(m)), T2(n)=O(g(n)),则 T1(m)+T2(n)=O(f(m) + g(n))**\n\t3. 对于选择结构,如if语句,它的主要时间耗费是在执行then字句或else字句所用的时间,需注意的是检验条件也需要O(1)时间\n\t4. 对于循环结构,循环语句的运行时间主要体现在多次迭代中执行循环体以及检验循环条件的时间耗费,一般可用大O下\"乘法法则\"  \n\t**乘法法则: 是指若算法的2个部分时间复杂度分别为 T1(n)=O(f(n))和 T2(n)=O(g(n)),则 T1\\*T2=O(f(n)\\*g(n))**\n\t5. 对于复杂的算法,可以将它分成几个容易估算的部分,然后利用求和法则和乘法法则技术整个算法的时间复杂度  \n\t**另外:若g(n)=O(f(n)),则O(f(n))+ O(g(n))=O(f(n))**\n\t\n- ####时间复杂度示例 \n\n#####O(1)\n~~~java\nTemp=i; i=j; j=temp; \n~~~\n如果算法的执行时间不随着问题规模n的增加而增长，即使算法中有上千条语句，其执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)。\n\n#####O(n)\n~~~java\n a=0;\n    b=1;              \t(1次)\n    for (i=1;i<=n;i++) \t(n次)\n    {  \n       s=a+b;　　　　\t(n次)\n       b=a;　　　　　\t(n次) \n       a=s;　　　　　\t(n次)\n    }\n~~~\nT(n)=1+4n=O(n).\n\n#####O(n^2)\n~~~java\n    sum=0；                 （1次）\n     for(i=1;i<=n;i++)     （n次）\n        for(j=1;j<=n;j++) （n^2次）\n         sum++；            （n^2次）\n~~~\n总的循环次数为0+1+2+...+(n-1)=n(n-1)/2\n去低阶项，去掉常数项，去掉高阶项的常参得到，所以T(n)=O(n^2)；\n\n#####O(log2n)\n~~~java\n    i=1;     (1次)\n    while (i<=n)\n       i=i*2; (如果频度是m,则2^m>n时退出循环,也就是m=log2n)\n~~~\n取最大值f(n)=log2n, T(n)=O(log2n)\n\n#####O(n^3)\n~~~java\nfor(i=0;i<n;i++)\n    {  \n       for(j=0;j<i;j++)  \n       {\n          for(k=0;k<j;k++)\n             x=x+2;  \n       }\n    }\n~~~ \n当i=m, j=k的时候,内层循环的次数为k当i=m时, j 可以取 0,1,...,m-1 , 所以这里最内循环共进行了0+1+...+m-1=(m-1)m/2次所以,i从0取到n, 则循环共进行了: 0+(1-1)*1/2+...+(n-1)n/2=n(n+1)(n-1)/6所以时间复杂度为O(n3).\n\n算法的空间复杂度\n--------------\n类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)S(n)定义为该算法所耗费的存储空间，它也是问题规模n的函数。渐近空间复杂度也常常简称为空间复杂度。\n空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。一个算法在计算机存储器上所占用的存储空间，包括存储算法本身所占用的存储空间，算法的输入输出数据所占用的存储空间和算法在运行过程中临时占用的存储空间这三个方面。","slug":"algorithm-complexity","updated":1419950190000,"excerpt":"<p>算法复杂度, 时间复杂度和空间复杂度\n","_id":"ry81oclhf8k9w84z","comments":true,"layout":"post","photos":[],"link":""},{"title":"zookeeper快速搭建","date":1421241491000,"categories":["la1sa0mvu1s8u9sa"],"tags":["26vuwkpo3wl1d7xl","lsbev37ymexeqm52"],"description":null,"content":"<p>快速搭建zookeeper集群,简单介绍了搭建过程,基本指令和日志的配置.\n<a id=\"more\"></a></p>\n<h3 id=\"standalone模式\">standalone模式</h3><hr>\n<h5 id=\"1.-创建配置文件conf/zoo.cfg\">1. 创建配置文件conf/zoo.cfg</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tickTime=<span class=\"number\">2000</span></div><div class=\"line\">dataDir=/var/zookeeper</div><div class=\"line\">clientPort=<span class=\"number\">2181</span></div></pre></td></tr></table></figure>\n\n<p><strong>tickTime</strong>单位是毫秒.这是zookeeper的最小时间单位,心跳间隔时间,同步超时时间都是基于这个值.\n<strong>dataDir</strong>保存zookeeper保存在内存中数据的快照,必须指定一个已经存在的目录.\n<strong>clientPort</strong>监听客户端连接的端口.</p>\n<h5 id=\"2.-启动zookeeper\">2. 启动zookeeper</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/zkServer.sh start zoo.cfg <span class=\"comment\">#指定加载zoo.cfg配置文件,可以不指定,默认是zoo.cfg</span></div></pre></td></tr></table></figure>\n\n<h5 id=\"3.-停止zookeeper\">3. 停止zookeeper</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/zkServer.sh stop zoo.cfg</div></pre></td></tr></table></figure>\n\n<h3 id=\"replicated模式\">replicated模式</h3><hr>\n<h5 id=\"1.-更新配置文件zoo.cfg\">1. 更新配置文件zoo.cfg</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># The number of milliseconds of each tick</span></div><div class=\"line\">tickTime=<span class=\"number\">2000</span></div><div class=\"line\"><span class=\"comment\"># The number of ticks that the initial </span></div><div class=\"line\"><span class=\"comment\"># synchronization phase can take</span></div><div class=\"line\">initLimit=<span class=\"number\">10</span></div><div class=\"line\"><span class=\"comment\"># The number of ticks that can pass between </span></div><div class=\"line\"><span class=\"comment\"># sending a request and getting an acknowledgement</span></div><div class=\"line\">syncLimit=<span class=\"number\">5</span></div><div class=\"line\"><span class=\"comment\"># the directory where the snapshot is stored.</span></div><div class=\"line\"><span class=\"comment\"># do not use /tmp for storage, /tmp here is just </span></div><div class=\"line\"><span class=\"comment\"># example sakes.</span></div><div class=\"line\">dataDir=/var/zookeeper/zookeeper-<span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\"># the directory where transaction log is stored.</span></div><div class=\"line\"><span class=\"comment\"># this parameter provides dedicated log device for ZooKeeper</span></div><div class=\"line\">dataLogDir=/var/zookeeper/zookeeper-<span class=\"number\">1</span>/log</div><div class=\"line\"><span class=\"comment\"># the port at which the clients will connect</span></div><div class=\"line\">clientPort=<span class=\"number\">2181</span></div><div class=\"line\"></div><div class=\"line\">server.<span class=\"number\">1</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">2888</span>:<span class=\"number\">3888</span></div><div class=\"line\">server.<span class=\"number\">2</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">2889</span>:<span class=\"number\">3889</span></div><div class=\"line\">server.<span class=\"number\">3</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">2890</span>:<span class=\"number\">3890</span></div></pre></td></tr></table></figure>\n\n<p><strong>initLimit</strong>连接集群中的leader实例的超时时间. initLimit=10的意思是10个tickTime时间.\n<strong>syncLimit</strong>与leader实例同步数据的超时时间.\n<strong>dataLogDir</strong>用于单独设置transaction log的目录,transaction log分离可以避免和普通log还有快照的竞争.\n<strong>server.x=[hostname]:[port1]:[port2]</strong>在dataDir下创建myid文件,将x写入.port1用于连接leader和其他节点.port2用于选举leader.</p>\n<h5 id=\"2.-启动多个zookeeper\">2. 启动多个zookeeper</h5><p>每个zookeeper节点都需要有一个对应的配置文件.    </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/zkServer.sh start zoo-<span class=\"number\">1</span>.cfg</div><div class=\"line\">bin/zkServer.sh start zoo-<span class=\"number\">2</span>.cfg</div><div class=\"line\">bin/zkServer.sh start zoo-<span class=\"number\">3</span>.cfg</div></pre></td></tr></table></figure>\n\n<h3 id=\"基本命令介绍\">基本命令介绍</h3><hr>\n<h5 id=\"1.-连接zookeeper节点\">1. 连接zookeeper节点</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/zkCli.sh -server <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">2181</span></div></pre></td></tr></table></figure>\n\n<h5 id=\"2.-基本指令\">2. 基本指令</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls / <span class=\"comment\">#查看根目录下的key</span></div><div class=\"line\">create /zk_test my_data <span class=\"comment\">#创建一个新的key-value</span></div><div class=\"line\">get /zk_test <span class=\"comment\">#获取指定key的value</span></div><div class=\"line\"><span class=\"keyword\">set</span> /zk_test my_data <span class=\"comment\">#设置</span></div><div class=\"line\">delete /zk_test <span class=\"comment\">#删除key</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"日志配置\">日志配置</h3><hr>\n<p>配置DailyRollingFile类型的日志,在conf/log4j.properties中增加以下配置</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Define some default values that can be overridden by system properties</span></div><div class=\"line\">zookeeper.root.logger=INFO, CONSOLE, DAILYROLLINGFILE</div><div class=\"line\">zookeeper.console.threshold=INFO</div><div class=\"line\">zookeeper.log.dir=.</div><div class=\"line\">zookeeper.log.file=zookeeper_rolling.log</div><div class=\"line\">zookeeper.log.dailyFile=zookeeper_daily.log</div><div class=\"line\"><span class=\"comment\"># Add DAILYROLLINGFILE to rootLogger to get log file output</span></div><div class=\"line\">log4j.appender.DAILYROLLINGFILE=org.apache.log4j.DailyRollingFileAppender</div><div class=\"line\">log4j.appender.DAILYROLLINGFILE.File=<span class=\"variable\">${zookeeper.log.dir}</span>/<span class=\"variable\">${zookeeper.log.dailyFile}</span></div><div class=\"line\">log4j.appender.DAILYROLLINGFILE.DatePatter=<span class=\"string\">'.'</span>yyyy-MM-dd</div><div class=\"line\">log4j.appender.DAILYROLLINGFILE.layout=org.apache.log4j.PatternLayout</div><div class=\"line\">log4j.appender.DAILYROLLINGFILE.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-<span class=\"number\">5</span>p [%t:%C{<span class=\"number\">1</span>}@%L] - %m%</div></pre></td></tr></table></figure>\n\n<p>修改bin/zkEnv.sh,找到以下代码</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"x<span class=\"variable\">${ZOO_LOG4J_PROP}</span>\"</span> = <span class=\"string\">\"x\"</span> ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    ZOO_LOG4J_PROP=<span class=\"string\">\"INFO,ROLLINGFILE\"</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n\n<p>修改为</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"x<span class=\"variable\">${ZOO_LOG4J_PROP}</span>\"</span> = <span class=\"string\">\"x\"</span> ]</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">    ZOO_LOG4J_PROP=<span class=\"string\">\"INFO,CONSOLE,DAILYROLLINGFILE\"</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n\n<p>再重新启动zookeeper,新的日志配置才会生效.</p>\n<h3 id=\"jvm参数调整\">JVM参数调整</h3><hr>\n<p>在conf目录下新建java.env文件,增加以下内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"shebang\">#!/usr/bin/env bash</span></div><div class=\"line\"><span class=\"keyword\">export</span> JVMFLAGS=<span class=\"string\">\"-Xms256m -Xmx256m\"</span></div></pre></td></tr></table></figure>\n\n<p>重新启动zookeeper.</p>\n","source":"_posts/zookeeper-quick-build.md","raw":"title: zookeeper快速搭建\ndate: 2015-01-14 21:18:11 \ncategories: 集群\ntags: ['zookeeper', '集群'] \ndescription:\n---\n快速搭建zookeeper集群,简单介绍了搭建过程,基本指令和日志的配置.\n<!--more-->\n###standalone模式\n---\n#####1. 创建配置文件conf/zoo.cfg\n~~~sh\ntickTime=2000\ndataDir=/var/zookeeper\nclientPort=2181\n~~~\n**tickTime**单位是毫秒.这是zookeeper的最小时间单位,心跳间隔时间,同步超时时间都是基于这个值.\n**dataDir**保存zookeeper保存在内存中数据的快照,必须指定一个已经存在的目录.\n**clientPort**监听客户端连接的端口.\n\n#####2. 启动zookeeper\n~~~sh\nbin/zkServer.sh start zoo.cfg #指定加载zoo.cfg配置文件,可以不指定,默认是zoo.cfg\n~~~\n\n#####3. 停止zookeeper\n~~~sh\nbin/zkServer.sh stop zoo.cfg\n~~~\n\n###replicated模式\n---  \n#####1. 更新配置文件zoo.cfg  \n~~~sh\n# The number of milliseconds of each tick\ntickTime=2000\n# The number of ticks that the initial \n# synchronization phase can take\ninitLimit=10\n# The number of ticks that can pass between \n# sending a request and getting an acknowledgement\nsyncLimit=5\n# the directory where the snapshot is stored.\n# do not use /tmp for storage, /tmp here is just \n# example sakes.\ndataDir=/var/zookeeper/zookeeper-1\n# the directory where transaction log is stored.\n# this parameter provides dedicated log device for ZooKeeper\ndataLogDir=/var/zookeeper/zookeeper-1/log\n# the port at which the clients will connect\nclientPort=2181\n\nserver.1=127.0.0.1:2888:3888\nserver.2=127.0.0.1:2889:3889\nserver.3=127.0.0.1:2890:3890\n~~~\n**initLimit**连接集群中的leader实例的超时时间. initLimit=10的意思是10个tickTime时间.\n**syncLimit**与leader实例同步数据的超时时间.\n**dataLogDir**用于单独设置transaction log的目录,transaction log分离可以避免和普通log还有快照的竞争.\n**server.x=[hostname]:[port1]:[port2]**在dataDir下创建myid文件,将x写入.port1用于连接leader和其他节点.port2用于选举leader.\n#####2. 启动多个zookeeper\n每个zookeeper节点都需要有一个对应的配置文件.    \n\n~~~sh\nbin/zkServer.sh start zoo-1.cfg\nbin/zkServer.sh start zoo-2.cfg\nbin/zkServer.sh start zoo-3.cfg\n~~~\n\n###基本命令介绍\n---\n#####1. 连接zookeeper节点\n\n~~~sh\nbin/zkCli.sh -server 127.0.0.1:2181\n~~~\n#####2. 基本指令\n\n~~~sh\nls / #查看根目录下的key\ncreate /zk_test my_data #创建一个新的key-value\nget /zk_test #获取指定key的value\nset /zk_test my_data #设置\ndelete /zk_test #删除key\n~~~\n\n###日志配置\n---\n配置DailyRollingFile类型的日志,在conf/log4j.properties中增加以下配置\n\n~~~sh\n# Define some default values that can be overridden by system properties\nzookeeper.root.logger=INFO, CONSOLE, DAILYROLLINGFILE\nzookeeper.console.threshold=INFO\nzookeeper.log.dir=.\nzookeeper.log.file=zookeeper_rolling.log\nzookeeper.log.dailyFile=zookeeper_daily.log\n# Add DAILYROLLINGFILE to rootLogger to get log file output\nlog4j.appender.DAILYROLLINGFILE=org.apache.log4j.DailyRollingFileAppender\nlog4j.appender.DAILYROLLINGFILE.File=${zookeeper.log.dir}/${zookeeper.log.dailyFile}\nlog4j.appender.DAILYROLLINGFILE.DatePatter='.'yyyy-MM-dd\nlog4j.appender.DAILYROLLINGFILE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DAILYROLLINGFILE.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%\n~~~\n修改bin/zkEnv.sh,找到以下代码\n\n~~~sh\nif [ \"x${ZOO_LOG4J_PROP}\" = \"x\" ]\nthen\n    ZOO_LOG4J_PROP=\"INFO,ROLLINGFILE\"\nfi\n~~~\n修改为\n\n~~~sh\nif [ \"x${ZOO_LOG4J_PROP}\" = \"x\" ]\nthen\n    ZOO_LOG4J_PROP=\"INFO,CONSOLE,DAILYROLLINGFILE\"\nfi\n~~~\n再重新启动zookeeper,新的日志配置才会生效.\n\n###JVM参数调整\n---\n在conf目录下新建java.env文件,增加以下内容\n\n~~~sh\n#!/usr/bin/env bash\nexport JVMFLAGS=\"-Xms256m -Xmx256m\"\n~~~\n重新启动zookeeper.\n\n\n\n\n","slug":"zookeeper-quick-build","updated":1421242503000,"excerpt":"<p>快速搭建zookeeper集群,简单介绍了搭建过程,基本指令和日志的配置.\n","_id":"t9hzerh5cee9fg6b","comments":true,"layout":"post","photos":[],"link":""},{"title":"react-tutorial-1","date":1440295302000,"categories":["jd1ja1ba68lgaj4j"],"tags":["t55pr2eyaldycfiq","6dfnz0di8n56dogi","bq3c4m2g4emcbdyo"],"description":null,"content":"<p>react入门教程-1\n<a id=\"more\"></a></p>\n<h3 id=\"环境搭建\">环境搭建</h3><p>需要安装  </p>\n<ol>\n<li>homebrew</li>\n<li>node</li>\n<li>bower<br><br></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir react-tutorial-<span class=\"number\">1</span></div><div class=\"line\">bower install react</div><div class=\"line\">touch index.html</div></pre></td></tr></table></figure>\n\n<h3 id=\"hello-world\">Hello World</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">html</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">meta</span> <span class=\"attribute\">charset</span>=<span class=\"value\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">title</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"title\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"bower_components/react/react.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"bower_components/react/JSXTransformer.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/jsx\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">var</span> MessageBox  = React.createClass({</div><div class=\"line\">                    alertMe: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{</div><div class=\"line\">                        alert(<span class=\"string\">\"click...\"</span>);</div><div class=\"line\">                    },</div><div class=\"line\">                    render: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">                        <span class=\"keyword\">return</span> (</div><div class=\"line\">                            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">h1</span> <span class=\"attribute\">onClick</span>=<span class=\"value\">{this.alertMe}</span>&gt;</span>Hello World {this.props.name}<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span></span></div><div class=\"line\">                        );</div><div class=\"line\">                    }</div><div class=\"line\"></div><div class=\"line\">                });</div><div class=\"line\"></div><div class=\"line\">                React.render(</div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"title\">MessageBox</span> <span class=\"attribute\">name</span>=<span class=\"value\">{\"shan\"}</span> /&gt;</span>,</div><div class=\"line\">                    document.getElementById(\"app\"),</div><div class=\"line\">                    function () {</div><div class=\"line\">                        console.log(\"render finished.\");</div><div class=\"line\">                    }</div><div class=\"line\">                );</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"component嵌套\">component嵌套</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MessageBox = React.createClass({</div><div class=\"line\">                    render: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">                        <span class=\"keyword\">var</span> subMessages = [];</div><div class=\"line\">                        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++){</div><div class=\"line\">                            <span class=\"comment\">//key!!!</span></div><div class=\"line\">                            subMessages.push(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">SubMessageBox</span> <span class=\"attribute\">key</span>=<span class=\"value\">{\"key_\"</span> + <span class=\"attribute\">i</span>}/&gt;</span>);</span></div><div class=\"line\">                        }</div><div class=\"line\">                        return (</div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Hello World {this.props.name}<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span></div><div class=\"line\">                                {subMessages}</div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">                        );</div><div class=\"line\">                    }</div><div class=\"line\">                });</div><div class=\"line\">                var SubMessageBox = React.createClass({</div><div class=\"line\">                    render: function() {</div><div class=\"line\">                        return (</div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"title\">h3</span>&gt;</span> SubMessageBox <span class=\"tag\">&lt;/<span class=\"title\">h3</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"title\">Footer</span> /&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">                        );</div><div class=\"line\">                    }</div><div class=\"line\">                });</div><div class=\"line\">                var Footer = React.createClass({</div><div class=\"line\">                    render: function() {</div><div class=\"line\">                        return (</div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">h5</span>&gt;</span> Footer <span class=\"tag\">&lt;/<span class=\"title\">h5</span>&gt;</span></div><div class=\"line\">                        );</div><div class=\"line\">                    }</div><div class=\"line\">                });</div><div class=\"line\">                React.render(</div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"title\">MessageBox</span> <span class=\"attribute\">name</span>=<span class=\"value\">{\"shan\"}</span> /&gt;</span>,</div><div class=\"line\">                    document.getElementById(\"app\"),</div><div class=\"line\">                    function () {</div><div class=\"line\">                        console.log(\"render finished.\");</div><div class=\"line\">                    }</div><div class=\"line\">                );</div></pre></td></tr></table></figure>\n\n<p>注意<em>SubMessageBox</em>中的<em>key</em>, 在动态循环增加组件的过程中, 要给每一个组件的<em>key</em>赋唯一的值, 以保证组件的显示顺序和正确结果.</p>\n<h3 id=\"state\">state</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MessageBox = React.createClass({</div><div class=\"line\">                   getInitialState: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{</div><div class=\"line\">                       <span class=\"keyword\">return</span> {count:<span class=\"number\">0</span>,}</div><div class=\"line\">                   },</div><div class=\"line\">                   addCount: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{</div><div class=\"line\">                       <span class=\"keyword\">this</span>.setState({</div><div class=\"line\">                           count: <span class=\"keyword\">this</span>.state.count + <span class=\"number\">1</span>,</div><div class=\"line\">                       });</div><div class=\"line\">                   },</div><div class=\"line\">                   render: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">                       <span class=\"keyword\">return</span> (</div><div class=\"line\">                           <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span></span></div><div class=\"line\">                               <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Hello World {this.props.name}<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span></div><div class=\"line\">                               <span class=\"tag\">&lt;<span class=\"title\">h3</span>&gt;</span>count: {this.state.count}<span class=\"tag\">&lt;/<span class=\"title\">h3</span>&gt;</span></div><div class=\"line\">                               <span class=\"tag\">&lt;<span class=\"title\">button</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"button\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"button\"</span> <span class=\"attribute\">onClick</span>=<span class=\"value\">{this.addCount}</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"title\">button</span>&gt;</span></div><div class=\"line\">                           <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">                       );</div><div class=\"line\">                   }</div><div class=\"line\">               });</div><div class=\"line\"></div><div class=\"line\">               React.render(</div><div class=\"line\">                   <span class=\"tag\">&lt;<span class=\"title\">MessageBox</span> <span class=\"attribute\">name</span>=<span class=\"value\">{\"shan\"}</span> /&gt;</span>,</div><div class=\"line\">                   document.getElementById(\"app\"),</div><div class=\"line\">                   function () {</div><div class=\"line\">                       console.log(\"render finished.\");</div><div class=\"line\">                   }</div><div class=\"line\">               );</div></pre></td></tr></table></figure>\n\n<p>注意在给<em>state</em>赋值时需要调用setState方法, 不要直接修改state. 每次调用setState都会重绘UI.</p>\n<h3 id=\"tips\">tips</h3><ul>\n<li>要渲染 HTML 标签，只需在 JSX 里使用小写字母开头的标签名。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myDivElement = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">className</span>=<span class=\"value\">\"foo\"</span> /&gt;</span>;</span>  </div><div class=\"line\">React.render(myDivElement, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>));</div></pre></td></tr></table></figure>\n\n<p>要渲染 React 组件，只需创建一个大写字母开头的本地变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = React.createClass({<span class=\"comment\">/*...*/</span>});</div><div class=\"line\"><span class=\"keyword\">var</span> myElement = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">MyComponent</span> <span class=\"attribute\">someProperty</span>=<span class=\"value\">{true}</span> /&gt;</span>;</span></div><div class=\"line\">React.render(myElement, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>));</div></pre></td></tr></table></figure>\n\n\n<ul>\n<li>由于<strong>JSX</strong>就是<em>JavaScript</em>，一些标识符像<em>class</em>和<em>for</em>不建议作为<em>XML</em>属性名。作为替代，<strong>React</strong> <em>DOM</em> 使用<em>className</em>和<em>htmlFor</em>来做对应的属性。</li>\n</ul>\n","source":"_posts/react-tutorial-1.md","raw":"title: react-tutorial-1  \ndate: 2015-08-23 10:01:42  \ncategories: react  \ntags: ['react','javascript','前端']  \ndescription:\n---\nreact入门教程-1\n<!--more-->\n### 环境搭建  \n需要安装  \n1. homebrew\n2. node\n3. bower  \n<br />\n``` sh\nmkdir react-tutorial-1\nbower install react\ntouch index.html\n```\n\n### Hello World\n``` javascript\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Hello World</title>\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script type=\"text/javascript\" src=\"bower_components/react/react.js\"></script>\n        <script type=\"text/javascript\" src=\"bower_components/react/JSXTransformer.js\"></script>\n        <script type=\"text/jsx\">\n\n                var MessageBox  = React.createClass({\n                    alertMe: function () {\n                        alert(\"click...\");\n                    },\n                    render: function() {\n                        return (\n                            <h1 onClick={this.alertMe}>Hello World {this.props.name}</h1>\n                        );\n                    }\n\n                });\n\n                React.render(\n                    <MessageBox name={\"shan\"} />,\n                    document.getElementById(\"app\"),\n                    function () {\n                        console.log(\"render finished.\");\n                    }\n                );\n        </script>\n    </body>\n</html>\n```\n\n### component嵌套\n``` javascript\nvar MessageBox = React.createClass({\n                    render: function() {\n                        var subMessages = [];\n                        for(var i=0; i<10; i++){\n                            //key!!!\n                            subMessages.push(<SubMessageBox key={\"key_\" + i}/>);\n                        }\n                        return (\n                            <div>\n                                <h1>Hello World {this.props.name}</h1>\n                                {subMessages}\n                            </div>\n\n                        );\n                    }\n                });\n                var SubMessageBox = React.createClass({\n                    render: function() {\n                        return (\n                            <div>\n                                <h3> SubMessageBox </h3>\n                                <Footer />\n                            </div>\n\n                        );\n                    }\n                });\n                var Footer = React.createClass({\n                    render: function() {\n                        return (\n                            <h5> Footer </h5>\n                        );\n                    }\n                });\n                React.render(\n                    <MessageBox name={\"shan\"} />,\n                    document.getElementById(\"app\"),\n                    function () {\n                        console.log(\"render finished.\");\n                    }\n                );\n```\n注意*SubMessageBox*中的*key*, 在动态循环增加组件的过程中, 要给每一个组件的*key*赋唯一的值, 以保证组件的显示顺序和正确结果.\n\n### state\n``` javascript\n\tvar MessageBox = React.createClass({\n                    getInitialState: function () {\n                        return {count:0,}\n                    },\n                    addCount: function () {\n                        this.setState({\n                            count: this.state.count + 1,\n                        });\n                    },\n                    render: function() {\n                        return (\n                            <div>\n                                <h1>Hello World {this.props.name}</h1>\n                                <h3>count: {this.state.count}</h3>\n                                <button type=\"button\" name=\"button\" onClick={this.addCount}>click</button>\n                            </div>\n\n                        );\n                    }\n                });\n\n                React.render(\n                    <MessageBox name={\"shan\"} />,\n                    document.getElementById(\"app\"),\n                    function () {\n                        console.log(\"render finished.\");\n                    }\n                );\n```\n注意在给*state*赋值时需要调用setState方法, 不要直接修改state. 每次调用setState都会重绘UI.\n\n### tips\n- 要渲染 HTML 标签，只需在 JSX 里使用小写字母开头的标签名。\n``` javascript  \nvar myDivElement = <div className=\"foo\" />;  \nReact.render(myDivElement, document.getElementById('example'));\n```\n要渲染 React 组件，只需创建一个大写字母开头的本地变量。\n``` javascript\nvar MyComponent = React.createClass({/*...*/});\nvar myElement = <MyComponent someProperty={true} />;\nReact.render(myElement, document.getElementById('example'));\n``` \n- 由于**JSX**就是*JavaScript*，一些标识符像*class*和*for*不建议作为*XML*属性名。作为替代，**React** *DOM* 使用*className*和*htmlFor*来做对应的属性。","slug":"react-tutorial-1","updated":1440339414000,"excerpt":"<p>react入门教程-1\n","_id":"m53q4x1mgfmdn3r6","comments":true,"layout":"post","photos":[],"link":""},{"title":"react-tutorial-2","date":1440296262000,"categories":["jd1ja1ba68lgaj4j"],"tags":["t55pr2eyaldycfiq","6dfnz0di8n56dogi","bq3c4m2g4emcbdyo"],"description":null,"content":"<p>react入门教程-2\n<a id=\"more\"></a>\n<br>\n<br>\n<br></p>\n<h3 id=\"组件之间的参数传递(props)\">组件之间的参数传递(props)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">html</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">meta</span> <span class=\"attribute\">charset</span>=<span class=\"value\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">title</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"title\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"bower_components/react/react.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"bower_components/react/JSXTransformer.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/jsx\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">                <span class=\"keyword\">var</span> MessageBox = React.createClass({</div><div class=\"line\">                    getInitialState: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{</div><div class=\"line\">                        <span class=\"keyword\">return</span> {</div><div class=\"line\">                            subMessages:[</div><div class=\"line\">                                <span class=\"string\">\"test message 1\"</span>,</div><div class=\"line\">                                <span class=\"string\">\"test message 2\"</span>,</div><div class=\"line\">                                <span class=\"string\">\"test message 3\"</span>,</div><div class=\"line\">                            ],</div><div class=\"line\">                        }</div><div class=\"line\">                    },</div><div class=\"line\">                    render: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">                        <span class=\"keyword\">return</span> (</div><div class=\"line\">                            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span></span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"title\">h1</span>&gt;</span>Hello World {this.props.name}<span class=\"tag\">&lt;/<span class=\"title\">h1</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"title\">SubMessageBox</span>  <span class=\"attribute\">messages</span>=<span class=\"value\">{this.state.subMessages}</span>/&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">                        );</div><div class=\"line\">                    }</div><div class=\"line\">                });</div><div class=\"line\">                var SubMessageBox  = React.createClass({</div><div class=\"line\">                    getDefaultProps: function () {</div><div class=\"line\">                        return {messages:[\"default message\"],}</div><div class=\"line\">                    },</div><div class=\"line\">                    render: function() {</div><div class=\"line\">                        var msgs = [];</div><div class=\"line\">                        this.props.messages.forEach(function (msg, index) {</div><div class=\"line\">                            msgs.push(</div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"title\">p</span> <span class=\"attribute\">key</span>=<span class=\"value\">{\"key_\"</span> + <span class=\"attribute\">index</span>}&gt;</span>\"message:\" {msg} {index}<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span></div><div class=\"line\">                            );</div><div class=\"line\">                        });</div><div class=\"line\">                        return (</div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">                                {msgs}</div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">                        );</div><div class=\"line\">                    }</div><div class=\"line\">                });</div><div class=\"line\">                React.render(</div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"title\">MessageBox</span> <span class=\"attribute\">name</span>=<span class=\"value\">{\"shan\"}</span> /&gt;</span>,</div><div class=\"line\">                    document.getElementById(\"app\"),</div><div class=\"line\">                    function () {</div><div class=\"line\">                        console.log(\"render finished.\");</div><div class=\"line\">                    }</div><div class=\"line\">                );</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"spread-attributes\">Spread Attributes</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> props = {};</div><div class=\"line\">props.foo = x;</div><div class=\"line\">props.bar = y;</div><div class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">Component</span> {<span class=\"attribute\">...props</span>} /&gt;</span>;</span></div></pre></td></tr></table></figure>\n\n<p>能被多次使用，也可以和其它属性一起用。注意顺序很重要，后面的会覆盖掉前面的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> props = { foo: <span class=\"string\">'default'</span> };</div><div class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">Component</span> {<span class=\"attribute\">...props</span>} <span class=\"attribute\">foo</span>=<span class=\"value\">{'override'}</span> /&gt;</span>;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(component.props.foo); <span class=\"comment\">// 'override'</span></div></pre></td></tr></table></figure>\n\n<p>接收props</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> FancyCheckbox = React.createClass({</div><div class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"keyword\">var</span> { checked, ...other } = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">    <span class=\"keyword\">var</span> fancyClass = checked ? <span class=\"string\">'FancyChecked'</span> : <span class=\"string\">'FancyUnchecked'</span>;</div><div class=\"line\">    <span class=\"comment\">// `other` 包含 { onClick: console.log } 但 checked 属性除外</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">div</span> {<span class=\"attribute\">...other</span>} <span class=\"attribute\">className</span>=<span class=\"value\">{fancyClass}</span> /&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  }</div><div class=\"line\">});</div><div class=\"line\">React.render(</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">FancyCheckbox</span> <span class=\"attribute\">checked</span>=<span class=\"value\">{true}</span> <span class=\"attribute\">onClick</span>=<span class=\"value\">{console.log.bind(console)}</span>&gt;</span></div><div class=\"line\">    Hello world!</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"title\">FancyCheckbox</span>&gt;</span>,</div><div class=\"line\">  document.getElementById('example')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong> tips </strong><br><em>props</em>应该禁止修改, 修改<em>props</em>对象可能会导致预料之外的结果.  </p>\n</blockquote>\n<h3 id=\"refs和getdomnode()的使用\">refs和getDOMNode()的使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> FormApp = React.createClass({</div><div class=\"line\">                    getInitialState: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{</div><div class=\"line\">                        <span class=\"keyword\">return</span> {</div><div class=\"line\">                            inputValue: <span class=\"string\">\"input value\"</span>,</div><div class=\"line\">                            selectedValue: <span class=\"string\">\"A\"</span>,</div><div class=\"line\">                            textareaValue: <span class=\"string\">\"some text...\"</span>,</div><div class=\"line\">                            checkedValues:[],</div><div class=\"line\">                            radioCheckedValue: <span class=\"string\">\"B\"</span>,</div><div class=\"line\">                        }</div><div class=\"line\">                    },</div><div class=\"line\">                    changeCheckBox: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(e)</span> </span>{</div><div class=\"line\">                        <span class=\"keyword\">var</span> checkedValues = <span class=\"keyword\">this</span>.state.checkedValues.slice();</div><div class=\"line\">                        <span class=\"keyword\">var</span> index = checkedValues.indexOf(e.target.value);</div><div class=\"line\">                        <span class=\"keyword\">if</span>(index == -<span class=\"number\">1</span>){</div><div class=\"line\">                            checkedValues.push(e.target.value);</div><div class=\"line\">                        }<span class=\"keyword\">else</span>{</div><div class=\"line\">                            checkedValues.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">                        }</div><div class=\"line\">                        <span class=\"keyword\">this</span>.setState({</div><div class=\"line\">                            checkedValues:checkedValues,</div><div class=\"line\">                        });</div><div class=\"line\">                    },</div><div class=\"line\">                    changeRadio: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(e)</span> </span>{</div><div class=\"line\">                        <span class=\"keyword\">this</span>.setState({</div><div class=\"line\">                            radioCheckedValue: e.target.value,</div><div class=\"line\">                        });</div><div class=\"line\">                    },</div><div class=\"line\">                    handleSubmit: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(e)</span> </span>{</div><div class=\"line\">                        e.preventDefault();</div><div class=\"line\">                        <span class=\"keyword\">var</span> formData = {</div><div class=\"line\">                            input: <span class=\"keyword\">this</span>.refs.goodInput.getDOMNode().value,</div><div class=\"line\">                            select: <span class=\"keyword\">this</span>.refs.goodSelect.getDOMNode().value,</div><div class=\"line\">                            textarea: <span class=\"keyword\">this</span>.refs.goodTextarea.getDOMNode().value,</div><div class=\"line\">                            checkBox: <span class=\"keyword\">this</span>.state.checkedValues,</div><div class=\"line\">                            radio: <span class=\"keyword\">this</span>.state.radioCheckedValue,</div><div class=\"line\">                        }</div><div class=\"line\">                        <span class=\"built_in\">console</span>.log(formData);</div><div class=\"line\">                        <span class=\"keyword\">this</span>.refs.radioButtons.say();</div><div class=\"line\">                    },</div><div class=\"line\">                    render: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">                        <span class=\"keyword\">return</span> (</div><div class=\"line\">                            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span></span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"title\">form</span> <span class=\"attribute\">onSubmit</span>=<span class=\"value\">{this.handleSubmit}</span>&gt;</span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">ref</span>=<span class=\"value\">\"goodInput\"</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"name\"</span> <span class=\"attribute\">defaultValue</span>=<span class=\"value\">{this.state.inputValue}</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"title\">br</span>/&gt;</span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"title\">select</span> <span class=\"attribute\">ref</span>=<span class=\"value\">\"goodSelect\"</span> <span class=\"attribute\">defaultValue</span>=<span class=\"value\">{this.state.selectedValue}</span>&gt;</span></div><div class=\"line\">                                        <span class=\"tag\">&lt;<span class=\"title\">option</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"A\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"title\">option</span>&gt;</span></div><div class=\"line\">                                        <span class=\"tag\">&lt;<span class=\"title\">option</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"B\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"title\">option</span>&gt;</span></div><div class=\"line\">                                        <span class=\"tag\">&lt;<span class=\"title\">option</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"C\"</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"title\">option</span>&gt;</span></div><div class=\"line\">                                    <span class=\"tag\">&lt;/<span class=\"title\">select</span>&gt;</span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"title\">br</span>/&gt;</span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"title\">RadioButtons</span> <span class=\"attribute\">ref</span>=<span class=\"value\">\"radioButtons\"</span> <span class=\"attribute\">changeRadio</span>=<span class=\"value\">{this.changeRadio}</span> /&gt;</span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"title\">br</span>/&gt;</span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"title\">CheckBoxButtons</span> <span class=\"attribute\">changeCheckBox</span>=<span class=\"value\">{this.changeCheckBox}</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"title\">br</span> /&gt;</span></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"title\">textarea</span> <span class=\"attribute\">ref</span>=<span class=\"value\">\"goodTextarea\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"name\"</span> <span class=\"attribute\">rows</span>=<span class=\"value\">\"8\"</span> <span class=\"attribute\">cols</span>=<span class=\"value\">\"40\"</span> <span class=\"attribute\">defaultValue</span>=<span class=\"value\">{this.state.textareaValue}</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">textarea</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"submit\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"name\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"OK\"</span> /&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;/<span class=\"title\">form</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">                        );</div><div class=\"line\">                    }</div><div class=\"line\">                });</div><div class=\"line\">                var RadioButtons = React.createClass({</div><div class=\"line\">                    say: function () {</div><div class=\"line\">                        alert(\" something... \");</div><div class=\"line\">                    },</div><div class=\"line\">                    render: function() {</div><div class=\"line\">                        return (</div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"radio\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"goodRadio\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"A\"</span> <span class=\"attribute\">onChange</span>=<span class=\"value\">{this.props.changeRadio}</span>/&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"radio\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"goodRadio\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"B\"</span> <span class=\"attribute\">onChange</span>=<span class=\"value\">{this.props.changeRadio}</span> <span class=\"attribute\">defaultChecked</span> /&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"radio\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"goodRadio\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"C\"</span> <span class=\"attribute\">onChange</span>=<span class=\"value\">{this.props.changeRadio}</span>  /&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span></div><div class=\"line\">                        );</div><div class=\"line\">                    }</div><div class=\"line\">                });</div><div class=\"line\">                var CheckBoxButtons = React.createClass({</div><div class=\"line\">                    render: function() {</div><div class=\"line\">                        return (</div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">span</span>&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"checkBox\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"goodChx\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"A\"</span> <span class=\"attribute\">onChange</span>=<span class=\"value\">{this.props.changeCheckBox}</span> /&gt;</span></div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"checkBox\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"goodChx\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"B\"</span></span></div><div class=\"line\">                                <span class=\"attribute\">onChange</span>=<span class=\"value\">{this.props.changeCheckBox}</span> /&gt;</div><div class=\"line\">                                <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"checkBox\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"goodChx\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"C\"</span></span></div><div class=\"line\">                                <span class=\"attribute\">onChange</span>=<span class=\"value\">{this.props.changeCheckBox}</span> /&gt;</div><div class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"title\">span</span>&gt;</span></div><div class=\"line\">                        );</div><div class=\"line\">                    }</div><div class=\"line\">                });</div><div class=\"line\">                React.render(</div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"title\">FormApp</span> <span class=\"attribute\">name</span>=<span class=\"value\">{\"shan\"}</span> /&gt;</span>,</div><div class=\"line\">                    document.getElementById(\"app\"),</div><div class=\"line\">                    function () {</div><div class=\"line\">                        console.log(\"render finished.\");</div><div class=\"line\">                    }</div><div class=\"line\">                );</div></pre></td></tr></table></figure>\n\n<p>引用<em>DOM</em>节点. <em>getDOMNode()</em>仅在挂载在组件上有效(也就是说, 组件已经被放进了<em>DOM</em>中).如果尝试在一个未被挂载的组件上调用这个函数(例如在<em>render</em>中调用<em>getDOMNode()</em>),将会抛出异常.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = React.createClass({</div><div class=\"line\">  handleClick: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"comment\">// Explicitly focus the text input using the raw DOM API.</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.refs.myTextInput.getDOMNode().focus();</div><div class=\"line\">  },</div><div class=\"line\">  render: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">    <span class=\"comment\">// The ref attribute adds a reference to the component to</span></div><div class=\"line\">    <span class=\"comment\">// this.refs when the component is mounted.</span></div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text\"</span> <span class=\"attribute\">ref</span>=<span class=\"value\">\"myTextInput\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">input</span></span></div><div class=\"line\">          <span class=\"attribute\">type</span>=<span class=\"value\">\"button\"</span></div><div class=\"line\">          <span class=\"attribute\">value</span>=<span class=\"value\">\"Focus the text input\"</span></div><div class=\"line\">          <span class=\"attribute\">onClick</span>=<span class=\"value\">{this.handleClick}</span></div><div class=\"line\">        /&gt;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  }</div><div class=\"line\">});</div><div class=\"line\">React.render(</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"title\">MyComponent</span> /&gt;</span>,</div><div class=\"line\">  document.getElementById('example')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>tips</strong><br><strong>表单</strong>,受限组件和不受限组件.如果设置了<em>value</em>就是受限组件,只能通过<em>onChange</em>事件来改变<em>value</em>. 如果<em>value</em>没有设置或者是<em>NULL</em>,则和普通的<em>HTML</em>控件一致.\n<em>select</em>组件\n<code>&lt;select&gt;</code>使用<em>value</em>属性来代替<em>seleted</em>.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;select value=<span class=\"string\">\"B\"</span>&gt;</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">option</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"A\"</span>&gt;</span>Apple<span class=\"tag\">&lt;/<span class=\"title\">option</span>&gt;</span>  </span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">option</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"B\"</span>&gt;</span>Banana<span class=\"tag\">&lt;/<span class=\"title\">option</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">option</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"C\"</span>&gt;</span>Cranberry<span class=\"tag\">&lt;/<span class=\"title\">option</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">select</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>给<em>value</em>属性传递一个数组，可以选中多个选项：<code>&lt;select multiple={true} value={[&#39;B&#39;, &#39;C&#39;]}&gt;</code>。</p>\n<h3 id=\"mixin\">mixin</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">html</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">meta</span> <span class=\"attribute\">charset</span>=<span class=\"value\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">title</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"title\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"title\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"title\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">div</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"bower_components/react/react-with-addons.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"bower_components/react/JSXTransformer.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/jsx\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">            <span class=\"keyword\">var</span> MessageBox = React.createClass({</div><div class=\"line\">                mixins: [ React.addons.LinkedStateMixin ],</div><div class=\"line\">                getInitialState: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>{</div><div class=\"line\">                    <span class=\"keyword\">return</span> {</div><div class=\"line\">                        value: <span class=\"string\">\"awesome!!\"</span>,</div><div class=\"line\">                        isAwesome: <span class=\"literal\">true</span>,</div><div class=\"line\">                    }</div><div class=\"line\">                },</div><div class=\"line\">                render: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>{</div><div class=\"line\">                    <span class=\"keyword\">return</span> (</div><div class=\"line\">                        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span></span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">h3</span>&gt;</span>{this.state.value}<span class=\"tag\">&lt;/<span class=\"title\">h3</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"txtName\"</span> <span class=\"attribute\">valueLink</span>=<span class=\"value\">{this.linkState(\"value\")}</span> /&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">br</span> /&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"checkbox\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"chbAwesome\"</span> <span class=\"attribute\">checkedLink</span>=<span class=\"value\">{this.linkState(\"isAwesome\")}</span> /&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">SubMessageBox</span> <span class=\"attribute\">valueLink</span>=<span class=\"value\">{this.linkState(\"value\")}</span> <span class=\"attribute\">checkedLink</span>=<span class=\"value\">{this.linkState(\"isAwesome\")}</span> /&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">                    );</div><div class=\"line\">                }</div><div class=\"line\">            });</div><div class=\"line\">            var SubMessageBox = React.createClass({</div><div class=\"line\">                render: function() {</div><div class=\"line\">                    return (</div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">h3</span>&gt;</span>SubMessageBox<span class=\"tag\">&lt;/<span class=\"title\">h3</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"txtName\"</span> <span class=\"attribute\">valueLink</span>=<span class=\"value\">{this.props.valueLink}</span> /&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">br</span> /&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"checkbox\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"chbAwesome\"</span> <span class=\"attribute\">checkedLink</span>=<span class=\"value\">{this.props.checkedLink}</span> /&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">SubSubMessageBox</span> {<span class=\"attribute\">...this.props</span>} /&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">                    );</div><div class=\"line\">                }</div><div class=\"line\">            });</div><div class=\"line\">            var SubSubMessageBox = React.createClass({</div><div class=\"line\">                render: function() {</div><div class=\"line\">                    return (</div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">h4</span>&gt;</span>SubSubMessageBox<span class=\"tag\">&lt;/<span class=\"title\">h4</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"txtName\"</span> <span class=\"attribute\">valueLink</span>=<span class=\"value\">{this.props.valueLink}</span> /&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">br</span> /&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"title\">input</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"checkbox\"</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"chbAwesome\"</span> <span class=\"attribute\">checkedLink</span>=<span class=\"value\">{this.props.checkedLink}</span> /&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"title\">div</span>&gt;</span></div><div class=\"line\">                    );</div><div class=\"line\">                }</div><div class=\"line\">            });</div><div class=\"line\">            React.render(</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"title\">MessageBox</span> <span class=\"attribute\">name</span>=<span class=\"value\">{\"shan\"}</span> /&gt;</span>,</div><div class=\"line\">                document.getElementById(\"app\"),</div><div class=\"line\">                function () {</div><div class=\"line\">                    console.log(\"render finished.\");</div><div class=\"line\">                }</div><div class=\"line\">            );</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"title\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意需要更改引用 <code>&lt;script type=&quot;text/javascript&quot; src=&quot;bower_components/react/react-with-addons.js&quot;&gt;&lt;/script&gt;</code></p>\n</blockquote>\n","source":"_posts/react-tutorial-2.md","raw":"title: react-tutorial-2  \ndate: 2015-08-23 10:17:42  \ncategories: react  \ntags: ['react','javascript','前端']  \ndescription:\n---\nreact入门教程-2\n<!--more-->\n<br />\n<br />\n<br />\n### 组件之间的参数传递(props)\n``` javascript\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Hello World</title>\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script type=\"text/javascript\" src=\"bower_components/react/react.js\"></script>\n        <script type=\"text/javascript\" src=\"bower_components/react/JSXTransformer.js\"></script>\n        <script type=\"text/jsx\">\n                var MessageBox = React.createClass({\n                    getInitialState: function () {\n                        return {\n                            subMessages:[\n                                \"test message 1\",\n                                \"test message 2\",\n                                \"test message 3\",\n                            ],\n                        }\n                    },\n                    render: function() {\n                        return (\n                            <div>\n                                <h1>Hello World {this.props.name}</h1>\n                                <SubMessageBox  messages={this.state.subMessages}/>\n                            </div>\n\n                        );\n                    }\n                });\n                var SubMessageBox  = React.createClass({\n                    getDefaultProps: function () {\n                        return {messages:[\"default message\"],}\n                    },\n                    render: function() {\n                        var msgs = [];\n                        this.props.messages.forEach(function (msg, index) {\n                            msgs.push(\n                                <p key={\"key_\" + index}>\"message:\" {msg} {index}</p>\n                            );\n                        });\n                        return (\n                            <div>\n                                {msgs}\n                            </div>\n                        );\n                    }\n                });\n                React.render(\n                    <MessageBox name={\"shan\"} />,\n                    document.getElementById(\"app\"),\n                    function () {\n                        console.log(\"render finished.\");\n                    }\n                );\n        </script>\n    </body>\n</html>\n```\n### Spread Attributes\n``` javascript\nvar props = {};\nprops.foo = x;\nprops.bar = y;\nvar component = <Component {...props} />;\n```\n能被多次使用，也可以和其它属性一起用。注意顺序很重要，后面的会覆盖掉前面的。\n``` javascript\nvar props = { foo: 'default' };\nvar component = <Component {...props} foo={'override'} />;\nconsole.log(component.props.foo); // 'override'\n```\n接收props\n``` javascript\nvar FancyCheckbox = React.createClass({\n  render: function() {\n    var { checked, ...other } = this.props;\n    var fancyClass = checked ? 'FancyChecked' : 'FancyUnchecked';\n    // `other` 包含 { onClick: console.log } 但 checked 属性除外\n    return (\n      <div {...other} className={fancyClass} />\n    );\n  }\n});\nReact.render(\n  <FancyCheckbox checked={true} onClick={console.log.bind(console)}>\n    Hello world!\n  </FancyCheckbox>,\n  document.getElementById('example')\n);\n```\n> ** tips **  \n> *props*应该禁止修改, 修改*props*对象可能会导致预料之外的结果.  \n\n### refs和getDOMNode()的使用\n``` javascript\nvar FormApp = React.createClass({\n                    getInitialState: function () {\n                        return {\n                            inputValue: \"input value\",\n                            selectedValue: \"A\",\n                            textareaValue: \"some text...\",\n                            checkedValues:[],\n                            radioCheckedValue: \"B\",\n                        }\n                    },\n                    changeCheckBox: function (e) {\n                        var checkedValues = this.state.checkedValues.slice();\n                        var index = checkedValues.indexOf(e.target.value);\n                        if(index == -1){\n                            checkedValues.push(e.target.value);\n                        }else{\n                            checkedValues.splice(index, 1);\n                        }\n                        this.setState({\n                            checkedValues:checkedValues,\n                        });\n                    },\n                    changeRadio: function (e) {\n                        this.setState({\n                            radioCheckedValue: e.target.value,\n                        });\n                    },\n                    handleSubmit: function (e) {\n                        e.preventDefault();\n                        var formData = {\n                            input: this.refs.goodInput.getDOMNode().value,\n                            select: this.refs.goodSelect.getDOMNode().value,\n                            textarea: this.refs.goodTextarea.getDOMNode().value,\n                            checkBox: this.state.checkedValues,\n                            radio: this.state.radioCheckedValue,\n                        }\n                        console.log(formData);\n                        this.refs.radioButtons.say();\n                    },\n                    render: function() {\n                        return (\n                            <div>\n                                <form onSubmit={this.handleSubmit}>\n                                    <input ref=\"goodInput\" type=\"text\" name=\"name\" defaultValue={this.state.inputValue} /><br/>\n                                    <select ref=\"goodSelect\" defaultValue={this.state.selectedValue}>\n                                        <option value=\"A\">1</option>\n                                        <option value=\"B\">2</option>\n                                        <option value=\"C\">3</option>\n                                    </select>\n                                    <br/>\n                                    <RadioButtons ref=\"radioButtons\" changeRadio={this.changeRadio} />\n                                    <br/>\n                                    <CheckBoxButtons changeCheckBox={this.changeCheckBox} />\n\n                                    <br />\n                                    <textarea ref=\"goodTextarea\" name=\"name\" rows=\"8\" cols=\"40\" defaultValue={this.state.textareaValue}></textarea>\n\n                                    <input type=\"submit\" name=\"name\" value=\"OK\" />\n                                </form>\n                            </div>\n                        );\n                    }\n                });\n                var RadioButtons = React.createClass({\n                    say: function () {\n                        alert(\" something... \");\n                    },\n                    render: function() {\n                        return (\n                            <span>\n                                <input type=\"radio\" name=\"goodRadio\" value=\"A\" onChange={this.props.changeRadio}/>\n                                <input type=\"radio\" name=\"goodRadio\" value=\"B\" onChange={this.props.changeRadio} defaultChecked />\n                                <input type=\"radio\" name=\"goodRadio\" value=\"C\" onChange={this.props.changeRadio}  />\n                            </span>\n                        );\n                    }\n                });\n                var CheckBoxButtons = React.createClass({\n                    render: function() {\n                        return (\n                            <span>\n                                <input type=\"checkBox\" name=\"goodChx\" value=\"A\" onChange={this.props.changeCheckBox} />\n                                <input type=\"checkBox\" name=\"goodChx\" value=\"B\"\n                                onChange={this.props.changeCheckBox} />\n                                <input type=\"checkBox\" name=\"goodChx\" value=\"C\"\n                                onChange={this.props.changeCheckBox} />\n                            </span>\n                        );\n                    }\n                });\n                React.render(\n                    <FormApp name={\"shan\"} />,\n                    document.getElementById(\"app\"),\n                    function () {\n                        console.log(\"render finished.\");\n                    }\n                );\n```\n引用*DOM*节点. *getDOMNode()*仅在挂载在组件上有效(也就是说, 组件已经被放进了*DOM*中).如果尝试在一个未被挂载的组件上调用这个函数(例如在*render*中调用*getDOMNode()*),将会抛出异常.\n``` javascript\nvar MyComponent = React.createClass({\n  handleClick: function() {\n    // Explicitly focus the text input using the raw DOM API.\n    this.refs.myTextInput.getDOMNode().focus();\n  },\n  render: function() {\n    // The ref attribute adds a reference to the component to\n    // this.refs when the component is mounted.\n    return (\n      <div>\n        <input type=\"text\" ref=\"myTextInput\" />\n        <input\n          type=\"button\"\n          value=\"Focus the text input\"\n          onClick={this.handleClick}\n        />\n      </div>\n    );\n  }\n});\nReact.render(\n  <MyComponent />,\n  document.getElementById('example')\n);\n```\n> **tips**  \n> **表单**,受限组件和不受限组件.如果设置了*value*就是受限组件,只能通过*onChange*事件来改变*value*. 如果*value*没有设置或者是*NULL*,则和普通的*HTML*控件一致.\n>*select*组件\n>`<select>`使用*value*属性来代替*seleted*.\n``` javascript\n<select value=\"B\">\n    <option value=\"A\">Apple</option>  \n    <option value=\"B\">Banana</option>  \n    <option value=\"C\">Cranberry</option>  \n</select>\n```\n给*value*属性传递一个数组，可以选中多个选项：`<select multiple={true} value={['B', 'C']}>`。\n\n### mixin\n``` javascript\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>Hello World</title>\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script type=\"text/javascript\" src=\"bower_components/react/react-with-addons.js\"></script>\n        <script type=\"text/javascript\" src=\"bower_components/react/JSXTransformer.js\"></script>\n        <script type=\"text/jsx\">\n            var MessageBox = React.createClass({\n                mixins: [ React.addons.LinkedStateMixin ],\n                getInitialState: function () {\n                    return {\n                        value: \"awesome!!\",\n                        isAwesome: true,\n                    }\n                },\n                render: function() {\n                    return (\n                        <div>\n                            <h3>{this.state.value}</h3>\n                            <input type=\"text\" name=\"txtName\" valueLink={this.linkState(\"value\")} />\n                            <br />\n                            <input type=\"checkbox\" name=\"chbAwesome\" checkedLink={this.linkState(\"isAwesome\")} />\n                            <SubMessageBox valueLink={this.linkState(\"value\")} checkedLink={this.linkState(\"isAwesome\")} />\n                        </div>\n                    );\n                }\n            });\n            var SubMessageBox = React.createClass({\n                render: function() {\n                    return (\n                        <div>\n                            <h3>SubMessageBox</h3>\n                            <input type=\"text\" name=\"txtName\" valueLink={this.props.valueLink} />\n                            <br />\n                            <input type=\"checkbox\" name=\"chbAwesome\" checkedLink={this.props.checkedLink} />\n                            <SubSubMessageBox {...this.props} />\n                        </div>\n                    );\n                }\n            });\n            var SubSubMessageBox = React.createClass({\n                render: function() {\n                    return (\n                        <div>\n                            <h4>SubSubMessageBox</h4>\n                            <input type=\"text\" name=\"txtName\" valueLink={this.props.valueLink} />\n                            <br />\n                            <input type=\"checkbox\" name=\"chbAwesome\" checkedLink={this.props.checkedLink} />\n                        </div>\n                    );\n                }\n            });\n            React.render(\n                <MessageBox name={\"shan\"} />,\n                document.getElementById(\"app\"),\n                function () {\n                    console.log(\"render finished.\");\n                }\n            );\n        </script>\n    </body>\n</html>\n```\n> 注意需要更改引用 `<script type=\"text/javascript\" src=\"bower_components/react/react-with-addons.js\"></script>`\n","slug":"react-tutorial-2","updated":1440339445000,"excerpt":"<p>react入门教程-2\n","_id":"3wgatwo1q5fnjb9w","comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"树","_id":"utoz8vmhwx4vkcbb","posts":["e19ryc5vcxs5dydl"]},{"name":"二叉树2","_id":"1po2xzmnh3tc4bpp","posts":["e19ryc5vcxs5dydl"]},{"name":"霍夫曼树","_id":"02q9sfee9qgapn7s","posts":["e19ryc5vcxs5dydl"]},{"name":"git","_id":"23cmtb0dkh7x26si","posts":["25tk03ghjlxwzceb"]},{"name":"github","_id":"ulijg6ioj65hhrlv","posts":["25tk03ghjlxwzceb"]},{"name":"JDK","_id":"hosyc30omo8hbggc","posts":["r1gjyknpiegdjgt2","zsmvbgzt8z9o4z5w"]},{"name":"ArrayList","_id":"4nqlhujy9vesdhdd","posts":["r1gjyknpiegdjgt2"]},{"name":"HashMap","_id":"ehms4dc85ebh2a2t","posts":["zsmvbgzt8z9o4z5w"]},{"name":"JVM","_id":"wydwtrb3borppcxd","posts":["h7ohxiv5pjktdejm"]},{"name":"debug","_id":"pglzzxeupgp8ym65","posts":["h7ohxiv5pjktdejm"]},{"name":"linux","_id":"p4cganxycougs3nw","posts":["slkuh1t29q7n9xo7"]},{"name":"command","_id":"xs9ga8jgtdnklo1x","posts":["slkuh1t29q7n9xo7"]},{"name":"日常","_id":"8u70xp32ao28pomh","posts":["slkuh1t29q7n9xo7","uhth8ts4j3iu5z6s"]},{"name":"solr","_id":"77cl3aj17uozsfdy","posts":["gf1g4gk3a378da76","18lyq3jg4cc3tped","vpru0nqmdfd5eai1"]},{"name":"java","_id":"jvl6vu2dhdcmseml","posts":["gf1g4gk3a378da76","18lyq3jg4cc3tped","vpru0nqmdfd5eai1","nurv2ibt8di27mw9"]},{"name":"搜索","_id":"53lfbdfn03ttpf03","posts":["gf1g4gk3a378da76","18lyq3jg4cc3tped","vpru0nqmdfd5eai1"]},{"name":"synchronized","_id":"mcb9tng9n9jwmm0s","posts":["nurv2ibt8di27mw9"]},{"name":"book","_id":"m0xnfqj10udnfggr","posts":["p2i1iov5dxmxuwfd"]},{"name":"算法","_id":"o2eaigdliwz5g0w8","posts":["ry81oclhf8k9w84z"]},{"name":"时间复杂度","_id":"f8ecf2id0ao1sk3a","posts":["ry81oclhf8k9w84z"]},{"name":"zookeeper","_id":"26vuwkpo3wl1d7xl","posts":["t9hzerh5cee9fg6b"]},{"name":"集群","_id":"lsbev37ymexeqm52","posts":["t9hzerh5cee9fg6b"]},{"name":"react","_id":"t55pr2eyaldycfiq","posts":["m53q4x1mgfmdn3r6","3wgatwo1q5fnjb9w"]},{"name":"javascript","_id":"6dfnz0di8n56dogi","posts":["m53q4x1mgfmdn3r6","3wgatwo1q5fnjb9w"]},{"name":"前端","_id":"bq3c4m2g4emcbdyo","posts":["m53q4x1mgfmdn3r6","3wgatwo1q5fnjb9w"]}]}